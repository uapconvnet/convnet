//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Convnet.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.14.0.0")]
    public sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int LineDefinition {
            get {
                return ((int)(this["LineDefinition"]));
            }
            set {
                this["LineDefinition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int ColumnDefinition {
            get {
                return ((int)(this["ColumnDefinition"]));
            }
            set {
                this["ColumnDefinition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int LineScript {
            get {
                return ((int)(this["LineScript"]));
            }
            set {
                this["LineScript"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int ColumnScript {
            get {
                return ((int)(this["ColumnScript"]));
            }
            set {
                this["ColumnScript"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public double PixelSize {
            get {
                return ((double)(this["PixelSize"]));
            }
            set {
                this["PixelSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("60")]
        public int RefreshInterval {
            get {
                return ((int)(this["RefreshInterval"]));
            }
            set {
                this["RefreshInterval"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int Optimizer {
            get {
                return ((int)(this["Optimizer"]));
            }
            set {
                this["Optimizer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int CurrentPage {
            get {
                return ((int)(this["CurrentPage"]));
            }
            set {
                this["CurrentPage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool Timings {
            get {
                return ((bool)(this["Timings"]));
            }
            set {
                this["Timings"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool PersistOptimizer {
            get {
                return ((bool)(this["PersistOptimizer"]));
            }
            set {
                this["PersistOptimizer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public uint GotoEpoch {
            get {
                return ((uint)(this["GotoEpoch"]));
            }
            set {
                this["GotoEpoch"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Normal")]
        public global::System.Diagnostics.ProcessPriorityClass Priority {
            get {
                return ((global::System.Diagnostics.ProcessPriorityClass)(this["Priority"]));
            }
            set {
                this["Priority"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public double PrioritySetter {
            get {
                return ((double)(this["PrioritySetter"]));
            }
            set {
                this["PrioritySetter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ShowTrainingPlot {
            get {
                return ((bool)(this["ShowTrainingPlot"]));
            }
            set {
                this["ShowTrainingPlot"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public uint PlotType {
            get {
                return ((uint)(this["PlotType"]));
            }
            set {
                this["PlotType"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[resnet-3-2-6-channelzeropad-relu]\r\nDataset=cifar10\r\nDim=3,32,32\r\nZeroPad=4,4\r\nRa" +
            "ndomCrop=Yes\r\nWeightsFiller=HeNormal(In,1)\r\nBiases=No\r\nDropout=0\r\nDepthDrop=0\r\nF" +
            "ixedDepthDrop=Yes\r\nScaling=No\r\nMomentum=0.995\r\nEps=0.0001\r\n\r\n[C1]\r\nType=Convolut" +
            "ion\r\nInputs=Input\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B1]\r\nType=BatchNormRelu\r" +
            "\nInputs=C1\r\n\r\n[C2]\r\nType=Convolution\r\nInputs=B1\r\nChannels=96\r\nKernel=3,3\r\nPad=1," +
            "1\r\n\r\n[B2]\r\nType=BatchNormRelu\r\nInputs=C2\r\n\r\n[C3]\r\nType=Convolution\r\nInputs=B2\r\nC" +
            "hannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[C4]\r\nType=Convolution\r\nInputs=B1\r\nChannels=9" +
            "6\r\nKernel=1,1\r\n\r\n[A1]\r\nType=Add\r\nInputs=C3,C4\r\n\r\n[B5]\r\nType=BatchNormRelu\r\nInput" +
            "s=A1\r\n\r\n[C5]\r\nType=Convolution\r\nInputs=B5\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[" +
            "B6]\r\nType=BatchNormRelu\r\nInputs=C5\r\n\r\n[C6]\r\nType=Convolution\r\nInputs=B6\r\nChannel" +
            "s=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A2]\r\nType=Add\r\nInputs=C6,A1\r\n\r\n[B7]\r\nType=BatchNor" +
            "mRelu\r\nInputs=A2\r\n\r\n[C7]\r\nType=Convolution\r\nInputs=B7\r\nChannels=192\r\nKernel=3,3\r" +
            "\nStride=2,2\r\nPad=1,1\r\n\r\n[B8]\r\nType=BatchNormRelu\r\nInputs=C7\r\n\r\n[C8]\r\nType=Convol" +
            "ution\r\nInputs=B8\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[P1]\r\nType=AvgPooling\r\nIn" +
            "puts=A2\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP1]\r\nType=ChannelZeroPad\r\nInputs=" +
            "P1\r\nChannels=192\r\n\r\n[A3]\r\nType=Add\r\nInputs=C8,CZP1\r\n\r\n[B9]\r\nType=BatchNormRelu\r\n" +
            "Inputs=A3\r\n\r\n[C9]\r\nType=Convolution\r\nInputs=B9\r\nChannels=192\r\nKernel=3,3\r\nPad=1," +
            "1\r\n\r\n[B10]\r\nType=BatchNormRelu\r\nInputs=C9\r\n\r\n[C10]\r\nType=Convolution\r\nInputs=B10" +
            "\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A4]\r\nType=Add\r\nInputs=C10,A3\r\n\r\n[B11]\r\nT" +
            "ype=BatchNormRelu\r\nInputs=A4\r\n\r\n[C11]\r\nType=Convolution\r\nInputs=B11\r\nChannels=38" +
            "4\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[B12]\r\nType=BatchNormRelu\r\nInputs=C11\r\n\r\n[" +
            "C12]\r\nType=Convolution\r\nInputs=B12\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[P2]\r\nT" +
            "ype=AvgPooling\r\nInputs=A4\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP2]\r\nType=Chann" +
            "elZeroPad\r\nInputs=P2\r\nChannels=384\r\n\r\n[A5]\r\nType=Add\r\nInputs=C12,CZP2\r\n\r\n[B13]\r\n" +
            "Type=BatchNormRelu\r\nInputs=A5\r\n\r\n[C13]\r\nType=Convolution\r\nInputs=B13\r\nChannels=3" +
            "84\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B14]\r\nType=BatchNormRelu\r\nInputs=C13\r\n\r\n[C14]\r\nType=" +
            "Convolution\r\nInputs=B14\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A6]\r\nType=Add\r\nIn" +
            "puts=C14,A5\r\n\r\n[B15]\r\nType=BatchNormRelu\r\nInputs=A6\r\n\r\n[C15]\r\nType=Convolution\r\n" +
            "Inputs=B15\r\nChannels=10\r\nKernel=1,1\r\n\r\n[B16]\r\nType=BatchNorm\r\nInputs=C15\r\n\r\n[GAP" +
            "]\r\nType=GlobalAvgPooling\r\nInputs=B16\r\n\r\n[LSM]\r\nType=LogSoftmax\r\nInputs=GAP\r\n\r\n[C" +
            "ost]\r\nType=Cost\r\nInputs=LSM\r\nCost=CategoricalCrossEntropy\r\nLabelIndex=0\r\nChannel" +
            "s=10\r\nEps=0.125")]
        public string DefinitionEditing {
            get {
                return ((string)(this["DefinitionEditing"]));
            }
            set {
                this["DefinitionEditing"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[resnet-3-2-6-channelzeropad-relu]\r\nDataset=cifar10\r\nDim=3,32,32\r\nZeroPad=4,4\r\nRa" +
            "ndomCrop=Yes\r\nWeightsFiller=HeNormal(In,1)\r\nBiases=No\r\nDropout=0\r\nDepthDrop=0\r\nF" +
            "ixedDepthDrop=Yes\r\nScaling=No\r\nMomentum=0.995\r\nEps=0.0001\r\n\r\n[C1]\r\nType=Convolut" +
            "ion\r\nInputs=Input\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B1]\r\nType=BatchNormRelu\r" +
            "\nInputs=C1\r\n\r\n[C2]\r\nType=Convolution\r\nInputs=B1\r\nChannels=96\r\nKernel=3,3\r\nPad=1," +
            "1\r\n\r\n[B2]\r\nType=BatchNormRelu\r\nInputs=C2\r\n\r\n[C3]\r\nType=Convolution\r\nInputs=B2\r\nC" +
            "hannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[C4]\r\nType=Convolution\r\nInputs=B1\r\nChannels=9" +
            "6\r\nKernel=1,1\r\n\r\n[A1]\r\nType=Add\r\nInputs=C3,C4\r\n\r\n[B5]\r\nType=BatchNormRelu\r\nInput" +
            "s=A1\r\n\r\n[C5]\r\nType=Convolution\r\nInputs=B5\r\nChannels=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[" +
            "B6]\r\nType=BatchNormRelu\r\nInputs=C5\r\n\r\n[C6]\r\nType=Convolution\r\nInputs=B6\r\nChannel" +
            "s=96\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A2]\r\nType=Add\r\nInputs=C6,A1\r\n\r\n[B7]\r\nType=BatchNor" +
            "mRelu\r\nInputs=A2\r\n\r\n[C7]\r\nType=Convolution\r\nInputs=B7\r\nChannels=192\r\nKernel=3,3\r" +
            "\nStride=2,2\r\nPad=1,1\r\n\r\n[B8]\r\nType=BatchNormRelu\r\nInputs=C7\r\n\r\n[C8]\r\nType=Convol" +
            "ution\r\nInputs=B8\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[P1]\r\nType=AvgPooling\r\nIn" +
            "puts=A2\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP1]\r\nType=ChannelZeroPad\r\nInputs=" +
            "P1\r\nChannels=192\r\n\r\n[A3]\r\nType=Add\r\nInputs=C8,CZP1\r\n\r\n[B9]\r\nType=BatchNormRelu\r\n" +
            "Inputs=A3\r\n\r\n[C9]\r\nType=Convolution\r\nInputs=B9\r\nChannels=192\r\nKernel=3,3\r\nPad=1," +
            "1\r\n\r\n[B10]\r\nType=BatchNormRelu\r\nInputs=C9\r\n\r\n[C10]\r\nType=Convolution\r\nInputs=B10" +
            "\r\nChannels=192\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A4]\r\nType=Add\r\nInputs=C10,A3\r\n\r\n[B11]\r\nT" +
            "ype=BatchNormRelu\r\nInputs=A4\r\n\r\n[C11]\r\nType=Convolution\r\nInputs=B11\r\nChannels=38" +
            "4\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[B12]\r\nType=BatchNormRelu\r\nInputs=C11\r\n\r\n[" +
            "C12]\r\nType=Convolution\r\nInputs=B12\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[P2]\r\nT" +
            "ype=AvgPooling\r\nInputs=A4\r\nKernel=3,3\r\nStride=2,2\r\nPad=1,1\r\n\r\n[CZP2]\r\nType=Chann" +
            "elZeroPad\r\nInputs=P2\r\nChannels=384\r\n\r\n[A5]\r\nType=Add\r\nInputs=C12,CZP2\r\n\r\n[B13]\r\n" +
            "Type=BatchNormRelu\r\nInputs=A5\r\n\r\n[C13]\r\nType=Convolution\r\nInputs=B13\r\nChannels=3" +
            "84\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[B14]\r\nType=BatchNormRelu\r\nInputs=C13\r\n\r\n[C14]\r\nType=" +
            "Convolution\r\nInputs=B14\r\nChannels=384\r\nKernel=3,3\r\nPad=1,1\r\n\r\n[A6]\r\nType=Add\r\nIn" +
            "puts=C14,A5\r\n\r\n[B15]\r\nType=BatchNormRelu\r\nInputs=A6\r\n\r\n[C15]\r\nType=Convolution\r\n" +
            "Inputs=B15\r\nChannels=10\r\nKernel=1,1\r\n\r\n[B16]\r\nType=BatchNorm\r\nInputs=C15\r\n\r\n[GAP" +
            "]\r\nType=GlobalAvgPooling\r\nInputs=B16\r\n\r\n[LSM]\r\nType=LogSoftmax\r\nInputs=GAP\r\n\r\n[C" +
            "ost]\r\nType=Cost\r\nInputs=LSM\r\nCost=CategoricalCrossEntropy\r\nLabelIndex=0\r\nChannel" +
            "s=10\r\nEps=0.125")]
        public string DefinitionActive {
            get {
                return ((string)(this["DefinitionActive"]));
            }
            set {
                this["DefinitionActive"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("resnet-3-2-6-channelzeropad-relu")]
        public string ModelNameActive {
            get {
                return ((string)(this["ModelNameActive"]));
            }
            set {
                this["ModelNameActive"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("420")]
        public double EditSplitPosition {
            get {
                return ((double)(this["EditSplitPosition"]));
            }
            set {
                this["EditSplitPosition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int SelectedLayer {
            get {
                return ((int)(this["SelectedLayer"]));
            }
            set {
                this["SelectedLayer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool DisableLocking {
            get {
                return ((bool)(this["DisableLocking"]));
            }
            set {
                this["DisableLocking"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool PlainFormat {
            get {
                return ((bool)(this["PlainFormat"]));
            }
            set {
                this["PlainFormat"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("cifar10")]
        public string Dataset {
            get {
                return ((string)(this["Dataset"]));
            }
            set {
                this["Dataset"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("96")]
        public double ShuffleSetter {
            get {
                return ((double)(this["ShuffleSetter"]));
            }
            set {
                this["ShuffleSetter"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("64")]
        public double Shuffle {
            get {
                return ((double)(this["Shuffle"]));
            }
            set {
                this["Shuffle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public uint GotoCycle {
            get {
                return ((uint)(this["GotoCycle"]));
            }
            set {
                this["GotoCycle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("64")]
        public byte BackgroundColor {
            get {
                return ((byte)(this["BackgroundColor"]));
            }
            set {
                this["BackgroundColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool UseTrainingStrategy {
            get {
                return ((bool)(this["UseTrainingStrategy"]));
            }
            set {
                this["UseTrainingStrategy"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool SGDR {
            get {
                return ((bool)(this["SGDR"]));
            }
            set {
                this["SGDR"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string ScriptActive {
            get {
                return ((string)(this["ScriptActive"]));
            }
            set {
                this["ScriptActive"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System.Collections.ObjectModel;\r\nusing System.Globalization;\r\nusing System." +
            "Runtime.InteropServices;\r\n\r\nusing Float = System.Single;\r\nusing UInt = System.UI" +
            "nt64;\r\n\r\n\r\nnamespace Scripts\r\n{\r\n    [Serializable()]\r\n    public enum Scripts\r\n" +
            "    {\r\n        augshufflenet = 0,\r\n        densenet = 1,\r\n        efficientnetv2" +
            " = 2,\r\n        mobilenetv3 = 3,\r\n        resnet = 4,\r\n        shufflenetv2 = 5\r\n" +
            "    }\r\n\r\n    [Serializable()]\r\n    public enum Datasets\r\n    {\r\n        cifar10 " +
            "= 0,\r\n        cifar100 = 1,\r\n        fashionmnist = 2,\r\n        mnist = 3,\r\n    " +
            "    tinyimagenet = 4\r\n    }\r\n\r\n    [Serializable()]\r\n    public enum Fillers\r\n  " +
            "  {\r\n        Constant = 0,\r\n        HeNormal = 1,\r\n        HeUniform = 2,\r\n     " +
            "   LeCunNormal = 3,\r\n        LeCunUniform = 4,\r\n        Normal = 5,\r\n        Tru" +
            "ncatedNormal = 6,\r\n        Uniform = 7,\r\n        XavierNormal = 8,\r\n        Xavi" +
            "erUniform = 9\r\n    }\r\n\r\n    [Serializable()]\r\n    public enum FillerModes\r\n    {" +
            "\r\n        Avg = 0,\r\n        In = 1,\r\n        Out = 2\r\n    }\r\n\r\n    [Serializable" +
            "()]\r\n    public enum Activations\r\n    {\r\n        FRelu = 1,\r\n        HardSwish =" +
            " 10,\r\n        HardSigmoid = 11,\r\n        Sigmoid = 12,\r\n        Mish = 16,\r\n    " +
            "    Relu = 19,\r\n        Swish = 25,\r\n        TanhExp = 27,\r\n        Gelu = 28\r\n " +
            "   }\r\n\r\n    [Serializable()]\r\n    public class EfficientNetRecord(UInt expandRat" +
            "io = 4, UInt channels = 24, UInt iterations = 2, UInt stride = 1, bool se = fals" +
            "e)\r\n    {\r\n        public UInt ExpandRatio { get; set; } = expandRatio;\r\n       " +
            " public UInt Channels { get; set; } = channels;\r\n        public UInt Iterations " +
            "{ get; set; } = iterations;\r\n        public UInt Stride { get; set; } = stride;\r" +
            "\n        public bool SE { get; set; } = se;\r\n        \r\n        public override s" +
            "tring ToString()\r\n        {\r\n            return \"(\" + ExpandRatio.ToString() + \"" +
            "-\" + Channels.ToString() + \"-\" + Iterations.ToString() + \"-\" + Stride.ToString()" +
            " + (SE ? \"-se\" : \"\") + \")\";\r\n        }\r\n    }\r\n\r\n    [Serializable()]\r\n    publi" +
            "c class ShuffleNetRecord(UInt iterations = 6u, UInt kernel = 3u, UInt pad = 1u, " +
            "UInt shuffle = 2u, bool se = false)\r\n    {\r\n\tpublic UInt Iterations { get; set; " +
            "} = iterations;\r\n        public UInt Kernel { get; set; } = kernel;\r\n        pub" +
            "lic UInt Pad { get; set; } = pad;\r\n        public UInt Shuffle { get; set; } = s" +
            "huffle;\r\n        public bool SE { get; set; } = se;\r\n        \r\n        public ov" +
            "erride string ToString()\r\n        {\r\n            return \"(\" + Iterations.ToStrin" +
            "g() + \"-\" + Kernel.ToString() + \"-\" + Pad.ToString() + \"-\" + Shuffle.ToString() " +
            "+ (SE ? \"-se\" : \"\") + \")\";\r\n        }\r\n    }\r\n\r\n    [Serializable()]\r\n    public" +
            " class ScriptParameters(Scripts script = Scripts.shufflenetv2, Datasets dataset " +
            "= Datasets.cifar10, UInt h = 32, UInt w = 32, UInt padH = 4, UInt padW = 4, bool" +
            " mirrorPad = false, bool meanStdNorm = true, Fillers weightsFiller = Fillers.HeN" +
            "ormal, FillerModes weightsFillerMode = FillerModes.In, Float weightsGain = (Floa" +
            "t)1.0, Float weightsScale = (Float)0.05, Float weightsLRM = 1, Float weightsWDM " +
            "= 1, bool hasBias = false, Fillers biasesFiller = Fillers.Constant, FillerModes " +
            "biasesFillerMode = FillerModes.In, Float biasesGain = (Float)1.0, Float biasesSc" +
            "ale = 0, Float biasesLRM = 1, Float biasesWDM = 1, Float batchNormMomentum = (Fl" +
            "oat)0.995, Float batchNormEps = (Float)1E-04, bool batchNormScaling = false, Flo" +
            "at alpha = (Float)0, Float beta = (Float)0, UInt groups = 3, UInt iterations = 4" +
            ", UInt width = 8, UInt growthRate = 12, bool bottleneck = false, Float dropout =" +
            " 0, Float compression = 0, bool squeezeExcitation = false, bool channelZeroPad =" +
            " true, Activations activation = Activations.Relu, UInt strideHFirstConv = 2, UIn" +
            "t strideWFirstConv = 2, Float depthDrop = (Float)0.2, bool fixedDepthDrop = fals" +
            "e)\r\n    {\r\n        public Scripts Script { get; set; } = script;\r\n\r\n        publ" +
            "ic Datasets Dataset { get; set; } = dataset;\r\n\r\n        public UInt C { get; set" +
            "; } = 3u;\r\n\r\n        public UInt D { get; set; } = 1u;\r\n\r\n        public UInt H " +
            "{ get; set; } = h;\r\n\r\n        public UInt W { get; set; } = w;\r\n\r\n        public" +
            " UInt PadD { get; set; } = 0u;\r\n\r\n        public UInt PadH { get; set; } = padH;" +
            "\r\n\r\n        public UInt PadW { get; set; } = padW;\r\n\r\n        public bool Mirror" +
            "Pad { get; set; } = mirrorPad;\r\n\r\n        public bool MeanStdNormalization { get" +
            "; set; } = meanStdNorm;\r\n\r\n        public Fillers WeightsFiller { get; set; } = " +
            "weightsFiller;\r\n\r\n        public FillerModes WeightsFillerMode { get; set; } = w" +
            "eightsFillerMode;\r\n\r\n        public Float WeightsGain { get; set; } = weightsGai" +
            "n;\r\n\r\n        public Float WeightsScale { get; set; } = weightsScale;\r\n\r\n       " +
            " public Float WeightsLRM { get; set; } = weightsLRM;\r\n\r\n        public Float Wei" +
            "ghtsWDM { get; set; } = weightsWDM;\r\n\r\n        public bool HasBias { get; set; }" +
            " = hasBias;\r\n\r\n        public Fillers BiasesFiller { get; set; } = biasesFiller;" +
            "\r\n\r\n        public FillerModes BiasesFillerMode { get; set; } = biasesFillerMode" +
            ";\r\n\r\n        public Float BiasesGain { get; set; } = biasesGain;\r\n\r\n        publ" +
            "ic Float BiasesScale { get; set; } = biasesScale;\r\n\r\n        public Float Biases" +
            "LRM { get; set; } = biasesLRM;\r\n\r\n        public Float BiasesWDM { get; set; } =" +
            " biasesWDM;\r\n\r\n        public bool FixedDepthDrop { get; set; } = fixedDepthDrop" +
            ";\r\n\r\n        public Float DepthDrop { get; set; } = depthDrop;\r\n\r\n        public" +
            " Float BatchNormMomentum { get; set; } = batchNormMomentum;\r\n\r\n        public Fl" +
            "oat BatchNormEps { get; set; } = batchNormEps;\r\n\r\n        public bool BatchNormS" +
            "caling { get; set; } = batchNormScaling;\r\n\r\n        public Float Alpha { get; se" +
            "t; } = alpha;\r\n\r\n        public Float Beta { get; set; } = beta;\r\n\r\n        publ" +
            "ic UInt Groups { get; set; } = groups;\r\n\r\n        public UInt Iterations { get; " +
            "set; } = iterations;\r\n\r\n        public UInt Width { get; set; } = width;\r\n\r\n    " +
            "    public UInt GrowthRate { get; set; } = growthRate;\r\n\r\n        public bool Bo" +
            "ttleneck { get; set; } = bottleneck;\r\n\r\n        public Float Dropout { get; set;" +
            " } = dropout;\r\n\r\n        public Float Compression { get; set; } = compression;\r\n" +
            "\r\n        public bool SqueezeExcitation { get; set; } = squeezeExcitation;\r\n\r\n  " +
            "      public bool ChannelZeroPad { get; set; } = channelZeroPad;\r\n\r\n        publ" +
            "ic Activations Activation { get; set; } = activation;\r\n\r\n        public UInt Str" +
            "ideHFirstConv { get; set; } = strideHFirstConv;\r\n\r\n        public UInt StrideWFi" +
            "rstConv { get; set; } = strideWFirstConv;\r\n\r\n        public ObservableCollection" +
            "<EfficientNetRecord> EfficientNet { get; set; } = [new(1, 24, 2, 1, false), new(" +
            "4, 48, 4, 2, false), new(4, 64, 4, 2, false), new(4, 128, 6, 2, true), new(6, 16" +
            "0, 9, 1, true), new(6, 256, 15, 2, true)];\r\n\r\n        public ObservableCollectio" +
            "n<ShuffleNetRecord> ShuffleNet { get; set; } = [new(7, 3, 1, 2, false), new(7, 3" +
            ", 1, 2, true), new(7, 3, 1, 2, true)];\r\n\r\n        public bool RandomCrop { get {" +
            " return PadH > 0 || PadW > 0; } }\r\n\r\n        public IEnumerable<Scripts> Scripts" +
            "List { get { return Enum.GetValues(typeof(Scripts)).Cast<Scripts>(); } }\r\n\r\n    " +
            "    public IEnumerable<Datasets> DatasetsList { get { return Enum.GetValues(type" +
            "of(Datasets)).Cast<Datasets>(); } }\r\n\r\n        public IEnumerable<Activations> A" +
            "ctivationsList { get { return Enum.GetValues(typeof(Activations)).Cast<Activatio" +
            "ns>(); } }\r\n\r\n        public IEnumerable<Fillers> FillersList { get { return Enu" +
            "m.GetValues(typeof(Fillers)).Cast<Fillers>(); } }\r\n\r\n        public IEnumerable<" +
            "FillerModes> FillerModesList { get { return Enum.GetValues(typeof(FillerModes))." +
            "Cast<FillerModes>(); } }\r\n\r\n        public bool WeightsFillerModeVisible { get {" +
            " return WeightsFiller == Fillers.HeNormal || WeightsFiller == Fillers.HeUniform " +
            "|| WeightsFiller == Fillers.LeCunNormal || WeightsFiller == Fillers.LeCunUniform" +
            "; } }\r\n\r\n        public bool WeightsGainVisible { get { return WeightsFiller == " +
            "Fillers.HeNormal || WeightsFiller == Fillers.HeUniform || WeightsFiller == Fille" +
            "rs.LeCunNormal || WeightsFiller == Fillers.LeCunUniform || WeightsFiller == Fill" +
            "ers.XavierNormal || WeightsFiller == Fillers.XavierUniform; } }\r\n\r\n        publi" +
            "c bool WeightsScaleVisible { get { return WeightsFiller == Fillers.Constant || W" +
            "eightsFiller == Fillers.Normal || WeightsFiller == Fillers.TruncatedNormal || We" +
            "ightsFiller == Fillers.Uniform; } }\r\n\r\n        public bool BiasesFillerModeVisib" +
            "le { get { return BiasesFiller == Fillers.HeNormal || BiasesFiller == Fillers.He" +
            "Uniform || BiasesFiller == Fillers.LeCunNormal || BiasesFiller == Fillers.LeCunU" +
            "niform; } }\r\n\r\n        public bool BiasesGainVisible { get { return BiasesFiller" +
            " == Fillers.HeNormal || BiasesFiller == Fillers.HeUniform || BiasesFiller == Fil" +
            "lers.LeCunNormal || BiasesFiller == Fillers.LeCunUniform || BiasesFiller == Fill" +
            "ers.XavierNormal || BiasesFiller == Fillers.XavierUniform; } }\r\n\r\n        public" +
            " bool BiasesScaleVisible { get { return BiasesFiller == Fillers.Constant || Bias" +
            "esFiller == Fillers.Normal || BiasesFiller == Fillers.TruncatedNormal || BiasesF" +
            "iller == Fillers.Uniform; } }\r\n\r\n        public bool DropoutUsed { get { return " +
            "(Dropout > 0 && Dropout < 1); } }\r\n\r\n        public bool GroupsVisible { get { r" +
            "eturn Script != Scripts.efficientnetv2 && Script != Scripts.shufflenetv2 && Scri" +
            "pt != Scripts.augshufflenet; } }\r\n\r\n        public bool IterationsVisible { get " +
            "{ return Script != Scripts.efficientnetv2 && Script != Scripts.shufflenetv2 && S" +
            "cript != Scripts.augshufflenet; } }\r\n\r\n        public bool WidthVisible { get { " +
            "return Script == Scripts.mobilenetv3 || Script == Scripts.resnet || Script == Sc" +
            "ripts.shufflenetv2 || Script == Scripts.augshufflenet; } }\r\n\r\n        public boo" +
            "l GrowthRateVisible { get { return Script == Scripts.densenet; } }\r\n\r\n        pu" +
            "blic bool DropoutVisible { get { return Script == Scripts.densenet || Script == " +
            "Scripts.resnet || Script == Scripts.efficientnetv2; } }\r\n\r\n        public bool D" +
            "epthDropVisible { get { return Script == Scripts.efficientnetv2 || Script == Scr" +
            "ipts.mobilenetv3 || Script == Scripts.resnet || Script == Scripts.densenet; } }\r" +
            "\n\r\n        public bool CompressionVisible { get { return Script == Scripts.dense" +
            "net; } }\r\n\r\n        public bool BottleneckVisible { get { return Script == Scrip" +
            "ts.densenet || Script == Scripts.resnet; } }\r\n\r\n        public bool SqueezeExcit" +
            "ationVisible { get { return Script == Scripts.mobilenetv3; } }\r\n\r\n        public" +
            " bool ChannelZeroPadVisible { get { return Script == Scripts.resnet; } }\r\n\r\n    " +
            "    public bool EfficientNetVisible { get { return Script == Scripts.efficientne" +
            "tv2; } }\r\n\r\n        public bool ShuffleNetVisible { get { return Script == Scrip" +
            "ts.shufflenetv2 || Script == Scripts.augshufflenet; } }\r\n        \r\n        publi" +
            "c UInt Depth\r\n        {\r\n            get\r\n            {\r\n                switch " +
            "(Script)\r\n                {\r\n                    case Scripts.densenet:\r\n       " +
            "                 return (Groups * Iterations * (Bottleneck ? 2u : 1u)) + ((Group" +
            "s - 1) * 2);\r\n                    case Scripts.mobilenetv3:\r\n                   " +
            "     return (Groups * Iterations * 3) + ((Groups - 1) * 2);\r\n                   " +
            " case Scripts.resnet:\r\n                        return (Groups * Iterations * (Bo" +
            "ttleneck ? 3u : 2u)) + ((Groups - 1) * 2);\r\n                    default:\r\n      " +
            "                  return 0;\r\n                }\r\n            }\r\n        }\r\n      " +
            "  \r\n        public string ModelName\r\n        {\r\n            get\r\n            {\r\n" +
            "                switch (Script)\r\n                {\r\n                    case Scr" +
            "ipts.densenet:\r\n                        return Script.ToString() + \"-\" + Groups." +
            "ToString() + \"-\" + Iterations.ToString() + \"-\" + GrowthRate.ToString() + (Dropou" +
            "t > 0 ? \"-dropout\" : \"\") + (DepthDrop > 0 ? (FixedDepthDrop ? \"-fixeddepthdrop\" " +
            ": \"-depthdrop\") : \"\") + (Compression > 0 ? \"-compression\" : \"\") + (Bottleneck ? " +
            "\"-bottleneck\" : \"\") + \"-\" + Activation.ToString().ToLower();\r\n                  " +
            "  case Scripts.efficientnetv2:\r\n                        {\r\n                     " +
            "       string name = \"\";\r\n                            foreach (var rec in Effici" +
            "entNet)\r\n                                name += rec.ToString();\r\n              " +
            "              return Script.ToString() + (DepthDrop > 0 ? (FixedDepthDrop ? \"-fi" +
            "xeddepthdrop-\" : \"-depthdrop-\") : \"\") + name;\r\n                        }\r\n      " +
            "              case Scripts.mobilenetv3:\r\n                        return Script.T" +
            "oString() + \"-\" + Groups.ToString() + \"-\" + Iterations.ToString() + \"-\" + Width." +
            "ToString() + \"-\" + Activation.ToString().ToLower() + (SqueezeExcitation ? \" -se\"" +
            " : \"\") + (DepthDrop > 0 ? (FixedDepthDrop ? \"-fixeddepthdrop\" : \"-depthdrop\") : " +
            "\"\");\r\n                    case Scripts.resnet:\r\n                        return S" +
            "cript.ToString() + \"-\" + Groups.ToString() + \"-\" + Iterations.ToString() + \"-\" +" +
            " Width.ToString() + (Dropout > 0 ? \"-dropout\" : \"\") + (DepthDrop > 0 ? (FixedDep" +
            "thDrop ? \"-fixeddepthdrop\" : \"-depthdrop\") : \"\") + (Bottleneck ? \"-bottleneck\" :" +
            " \"\") + (ChannelZeroPad ? \"-channelzeropad\" : \"\") + \"-\" + Activation.ToString().T" +
            "oLower();\r\n                    case Scripts.augshufflenet:\r\n                    " +
            "case Scripts.shufflenetv2:\r\n                        {\r\n                         " +
            "   string name = \"\";\r\n                            foreach (var rec in ShuffleNet" +
            ")\r\n                                name += rec.ToString();\r\n                    " +
            "        return Script.ToString() + \"-\" + Width.ToString() + name;\r\n             " +
            "           }\r\n                    default:\r\n                        return Scrip" +
            "t.ToString() + \"-\" + Groups.ToString() + \"-\" + Iterations.ToString();\r\n         " +
            "       }\r\n            }\r\n        }\r\n        \r\n        public UInt Classes\r\n     " +
            "   {\r\n            get\r\n            {\r\n                switch (Dataset)\r\n        " +
            "        {\r\n                    case Datasets.cifar100:\r\n                        " +
            "return 100;\r\n                    case Datasets.tinyimagenet:\r\n                  " +
            "      return 200;\r\n                    default:\r\n                        return " +
            "10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public class Scri" +
            "ptCatalog\r\n    {\r\n        public static string nwl { get; } = Environment.NewLin" +
            "e;\r\n\r\n\r\n        public static string to_string(bool variable)\r\n        {\r\n      " +
            "      return variable ? \"Yes\" : \"No\";\r\n        }\r\n\r\n        public static string" +
            " to_string(UInt number)\r\n        {\r\n            return number.ToString();\r\n     " +
            "   }\r\n\r\n        public static string to_string(Float number)\r\n        {\r\n       " +
            "     return number.ToString(new CultureInfo(\"en-US\"));\r\n        }\r\n\r\n        pub" +
            "lic static string to_string(Datasets dataset)\r\n        {\r\n            return dat" +
            "aset.ToString();\r\n        }\r\n\r\n        public static string to_string(Fillers fi" +
            "ller)\r\n        {\r\n            return filler.ToString();\r\n        }\r\n\r\n        pu" +
            "blic static string to_string(FillerModes fillerMode)\r\n        {\r\n            ret" +
            "urn fillerMode.ToString();\r\n        }\r\n\r\n        public static UInt DIV8(UInt ch" +
            "annels)\r\n        {\r\n            if (channels % 8ul == 0ul)\r\n                retu" +
            "rn channels;\r\n\r\n            return ((channels / 8ul) + 1ul) * 8ul;\r\n        }\r\n\r" +
            "\n        public static UInt DIV16(UInt channels)\r\n        {\r\n            if (cha" +
            "nnels % 16ul == 0ul)\r\n                return channels;\r\n\r\n            return ((c" +
            "hannels / 16ul) + 1ul) * 16ul;\r\n        }\r\n\r\n        public static string In(str" +
            "ing prefix, UInt id)\r\n        {\r\n            return prefix + to_string(id);\r\n   " +
            "     }\r\n\r\n        public static string BatchNorm(UInt id, string inputs, string " +
            "group = \"\", string prefix = \"B\")\r\n        {\r\n            return \"[\" + group + pr" +
            "efix + to_string(id) + \"]\" + nwl +\r\n                \"Type=BatchNorm\" + nwl +\r\n  " +
            "              \"Inputs=\" + inputs + nwl + nwl;\r\n        }\r\n\r\n        public stati" +
            "c string LayerNorm(UInt id, string inputs, string group = \"\", string prefix = \"L" +
            "N\")\r\n        {\r\n            return \"[\" + group + prefix + to_string(id) + \"]\" + " +
            "nwl +\r\n                \"Type=LayerNorm\" + nwl +\r\n                \"Inputs=\" + inp" +
            "uts + nwl +\r\n                \"Eps=1e-6\" + nwl + nwl;\r\n        }\r\n\r\n        // pu" +
            "blic static string BatchNormActivation(UInt id, string inputs, string activation" +
            " = \"Relu\", string group = \"\", string prefix = \"B\")\r\n        // {\r\n        //    " +
            "if (activation == \"Relu\")\r\n        //        return \r\n        //            \"[\" " +
            "+ group + prefix + to_string(id) + \"]\" + nwl +\r\n        //            \"Type=Batc" +
            "hNormRelu\" + nwl +\r\n        //            \"Inputs=\" + inputs + nwl + nwl;\r\n     " +
            "   //    else\r\n        //        return \r\n        //            \"[\" + group + pr" +
            "efix + to_string(id) + \"]\" + nwl +\r\n        //            \"Type=BatchNormActivat" +
            "ion\" + nwl +\r\n        //            \"Inputs=\" + inputs + nwl + \r\n        //     " +
            "       \"Activation=\" + activation + nwl + nwl;\r\n        // }\r\n\r\n        public s" +
            "tatic string BatchNormActivation(UInt id, string inputs, Activations activation " +
            "= Activations.Relu, string group = \"\", string prefix = \"B\")\r\n        {\r\n        " +
            "    if (activation != Activations.FRelu)\r\n            {\r\n                if (act" +
            "ivation == Activations.Relu)\r\n                {\r\n                    return \"[\" " +
            "+ group + prefix + to_string(id) + \"]\" + nwl +\r\n                        \"Type=Ba" +
            "tchNormRelu\" + nwl +\r\n                        \"Inputs=\" + inputs + nwl + nwl;\r\n " +
            "               }\r\n                else\r\n                {\r\n                    r" +
            "eturn \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n                      " +
            "  \"Type=BatchNormActivation\" + nwl +\r\n                        \"Inputs=\" + inputs" +
            " + nwl +\r\n                        \"Activation=\" + activation.ToString() + nwl + " +
            "nwl;\r\n\r\n                    //return \"[\" + group + \"BN\" + to_string(id) + \"]\" + " +
            "nwl +\r\n                    //    \"Type=BatchNorm\" + nwl +\r\n                    /" +
            "/\t\"Inputs=\" + inputs + nwl + nwl +\r\n                    //\t\"[\" + group + prefix " +
            "+ to_string(id) + \"]\" + nwl +\r\n                    //\t\"Type=Activation\" + nwl +\r" +
            "\n                    //\t\"Inputs=\" + group + \"BN\" + to_string(id) + nwl +\r\n      " +
            "              //\t\"Activation=\" + activation.ToString() + nwl + nwl;\r\n           " +
            "     }\r\n            }\r\n            else\r\n            {\r\n                return \"" +
            "[\" + group + \"B\" + to_string(id) + \"B1]\" + nwl +\r\n                    \"Type=Batc" +
            "hNorm\" + nwl +\r\n                    \"Inputs=\" + inputs + nwl + nwl +\r\n\r\n        " +
            "            \"[\" + group + \"DC\" + to_string(id) + \"DC]\" + nwl +\r\n                " +
            "    \"Type=DepthwiseConvolution\" + nwl +\r\n                    \"Inputs=\" + group +" +
            " \"B\" + to_string(id) + \"B1\" + nwl +\r\n                    \"Kernel=3,3\" + nwl +\r\n " +
            "                   \"Pad=1,1\" + nwl + nwl +\r\n\r\n                    \"[\" + group + " +
            "\"B\" + to_string(id) + \"B2]\" + nwl +\r\n                    \"Type=BatchNorm\" + nwl " +
            "+\r\n                    \"Inputs=\" + group + \"DC\" + to_string(id) + \"DC\" + nwl + n" +
            "wl +\r\n\r\n                    \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n" +
            "                    \"Type=Max\" + nwl +\r\n                    \"Inputs=\" + group + " +
            "\"B\" + to_string(id) + \"B2,\" + group + \"B\" + to_string(id) + \"B1\" + nwl + nwl;\r\n " +
            "           }\r\n        }\r\n\r\n        public static string BatchNormActivationDropo" +
            "ut(UInt id, string inputs, Activations activation = Activations.Relu, Float drop" +
            "out = 0.0f, string group = \"\", string prefix = \"B\")\r\n        {\r\n            if (" +
            "activation != Activations.FRelu)\r\n            {\r\n                return\r\n       " +
            "             \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n               " +
            "     \"Type=BatchNormActivationDropout\" + nwl +\r\n                    \"Inputs=\" + " +
            "inputs + nwl +\r\n                    \"Activation=\" + activation.ToString() + nwl " +
            "+\r\n                    (dropout > 0f ? \"Dropout=\" + to_string(dropout) + nwl + n" +
            "wl : nwl);\r\n            }\r\n            else\r\n            {\r\n                retu" +
            "rn\r\n                    \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n    " +
            "                \"Type=BatchNormActivationDropout\" + nwl +\r\n                    \"" +
            "Inputs=\" + inputs + nwl +\r\n                    \"Activation=HardSwish\" + nwl +\r\n " +
            "                   (dropout > 0f ? \"Dropout=\" + to_string(dropout) + nwl + nwl :" +
            " nwl);\r\n            }\r\n        }\r\n\r\n        public static string Resampling(UInt" +
            " id, string inputs, string group = \"\", string prefix = \"R\")\r\n        {\r\n        " +
            "    return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n                \"" +
            "Type=Resampling\" + nwl +\r\n                \"Inputs=\" + inputs + nwl +\r\n          " +
            "      \"Factor=0.5,0.5\" + nwl +\r\n                \"Algorithm=Linear\" + nwl + nwl;\r" +
            "\n        }\r\n\r\n        public static string ReductionAvg(UInt id, string inputs, " +
            "string group = \"\", string prefix = \"RAVG\")\r\n        {\r\n            return \"[\" + " +
            "group + prefix + to_string(id) + \"]\" + nwl +\r\n                \"Type=Reduction\" +" +
            " nwl +\r\n                \"Inputs=\" + inputs + nwl +\r\n                \"Operation=A" +
            "vg\" + nwl + nwl;\r\n        }\r\n\r\n        public static string ReductionMax(UInt id" +
            ", string inputs, string group = \"\", string prefix = \"RMAX\")\r\n        {\r\n        " +
            "    return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n                \"" +
            "Type=Reduction\" + nwl +\r\n                \"Inputs=\" + inputs + nwl +\r\n           " +
            "     \"Operation=Max\" + nwl + nwl;\r\n        }\r\n\r\n        public static string Con" +
            "volution(UInt id, string inputs, UInt channels, UInt kernelX = 3, UInt kernelY =" +
            " 3, UInt strideX = 1, UInt strideY = 1, UInt padX = 1, UInt padY = 1, bool biase" +
            "s = false, string group = \"\", string prefix = \"C\", string weightsFiller = \"\")\r\n " +
            "       {\r\n            return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r" +
            "\n                \"Type=Convolution\" + nwl +\r\n                \"Inputs=\" + inputs " +
            "+ nwl +\r\n                \"Channels=\" + to_string(channels) + nwl +\r\n            " +
            "    \"Kernel=\" + to_string(kernelX) + \",\" + to_string(kernelY) + nwl +\r\n         " +
            "       (strideX != 1 || strideY != 1 ? \"Stride=\" + to_string(strideX) + \",\" + to" +
            "_string(strideY) + nwl : \"\") +\r\n                (padX != 0 || padY != 0 ? \"Pad=\"" +
            " + to_string(padX) + \",\" + to_string(padY) + nwl : \"\") +\r\n                (biase" +
            "s ? \"Biases=Yes\" + nwl : \"\") +\r\n                (weightsFiller != \"\" ? \"WeightsF" +
            "iller=\" + weightsFiller + nwl + nwl : nwl);\r\n        }\r\n\r\n        public static " +
            "string DepthwiseConvolution(UInt id, string inputs, UInt multiplier = 1, UInt ke" +
            "rnelX = 3, UInt kernelY = 3, UInt strideX = 1, UInt strideY = 1, UInt padX = 1, " +
            "UInt padY = 1, bool biases = false, string group = \"\", string prefix = \"DC\", str" +
            "ing weightsFiller = \"\")\r\n        {\r\n            return \"[\" + group + prefix + to" +
            "_string(id) + \"]\" + nwl +\r\n                \"Type=DepthwiseConvolution\" + nwl +\r\n" +
            "                \"Inputs=\" + inputs + nwl +\r\n                (multiplier > 1 ? \"M" +
            "ultiplier=\" + to_string(multiplier) + nwl : \"\") +\r\n                \"Kernel=\" + t" +
            "o_string(kernelX) + \",\" + to_string(kernelY) + nwl +\r\n                (strideX !" +
            "= 1 || strideY != 1 ? \"Stride=\" + to_string(strideX) + \",\" + to_string(strideY) " +
            "+ nwl : \"\") +\r\n                (padX != 0 || padY != 0 ? \"Pad=\" + to_string(padX" +
            ") + \",\" + to_string(padY) + nwl : \"\") +\r\n                (biases ? \"Biases=Yes\" " +
            "+ nwl : \"\") +\r\n                (weightsFiller != \"\" ? \"WeightsFiller=\" + weights" +
            "Filler + nwl + nwl : nwl);\r\n        }\r\n\r\n        public static string PartialDep" +
            "thwiseConvolution(UInt id, string inputs, UInt part = 1, UInt groups = 1, UInt k" +
            "ernelX = 3, UInt kernelY = 3, UInt strideX = 1, UInt strideY = 1, UInt padX = 1," +
            " UInt padY = 1, bool biases = false, string group = \"\", string prefix = \"DC\", st" +
            "ring weightsFiller = \"\")\r\n        {\r\n            return \"[\" + group + prefix + t" +
            "o_string(id) + \"]\" + nwl +\r\n                \"Type=PartialDepthwiseConvolution\" +" +
            " nwl +\r\n                \"Inputs=\" + inputs + nwl +\r\n                \"Group=\" + t" +
            "o_string(part) + nwl +\r\n                \"Groups=\" + to_string(groups) + nwl +\r\n " +
            "               \"Kernel=\" + to_string(kernelX) + \",\" + to_string(kernelY) + nwl +" +
            "\r\n                (strideX != 1 || strideY != 1 ? \"Stride=\" + to_string(strideX)" +
            " + \",\" + to_string(strideY) + nwl : \"\") +\r\n                (padX != 0 || padY !=" +
            " 0 ? \"Pad=\" + to_string(padX) + \",\" + to_string(padY) + nwl : \"\") +\r\n           " +
            "     (biases ? \"Biases=Yes\" + nwl : \"\") +\r\n                (weightsFiller != \"\" " +
            "? \"WeightsFiller=\" + weightsFiller + nwl + nwl : nwl);\r\n        }\r\n\r\n        pub" +
            "lic static string DepthwiseMixedConvolution(UInt g, UInt id, string inputs, UInt" +
            " strideX = 1, UInt strideY = 1, bool biases = false, bool useChannelSplit = true" +
            ", string group = \"\", string prefix = \"DC\")\r\n        {\r\n            switch (g)\r\n " +
            "           {\r\n                case 0:\r\n                    return DepthwiseConvo" +
            "lution(id, inputs, 1, 3, 3, strideX, strideY, 1, 1, biases, group, prefix);\r\n\r\n " +
            "               case 1:\r\n                    return useChannelSplit ? ChannelSpli" +
            "t(id, inputs, 2, 1, \"Q1\") + ChannelSplit(id, inputs, 2, 2, \"Q2\") +\r\n            " +
            "            DepthwiseConvolution(id, In(\"Q1CS\", id), 1, 3, 3, strideX, strideY, " +
            "1, 1, biases, \"A\") + DepthwiseConvolution(id, In(\"Q2CS\", id), 1, 5, 5, strideX, " +
            "strideY, 2, 2, biases, \"B\") +\r\n                        Concat(id, In(\"ADC\", id) " +
            "+ \",\" + In(\"BDC\", id), group, prefix) :\r\n                        PartialDepthwis" +
            "eConvolution(id, inputs, 1, 2, 3, 3, strideX, strideY, 1, 1, biases, \"A\") + Part" +
            "ialDepthwiseConvolution(id, inputs, 2, 2, 5, 5, strideX, strideY, 2, 2, biases, " +
            "\"B\") +\r\n                        Concat(id, In(\"ADC\", id) + \",\" + In(\"BDC\", id), " +
            "group, prefix);\r\n                /*\r\n                case 2:\r\n                  " +
            "  return useChannelSplit ? ChannelSplit(id, inputs, 3, 1, \"Q1\") + ChannelSplit(i" +
            "d, inputs, 3, 2, \"Q2\") + ChannelSplit(id, inputs, 3, 3, \"Q3\") +\r\n               " +
            "         DepthwiseConvolution(id, In(\"Q1CS\", id), 1, 3, 3, strideX, strideY, 1, " +
            "1, biases, \"A\") + DepthwiseConvolution(id, In(\"Q2CS\", id), 1, 5, 5, strideX, str" +
            "ideY, 2, 2, biases, \"B\") + DepthwiseConvolution(id, In(\"Q3CS\", id), 1, 7, 7, str" +
            "ideX, strideY, 3, 3, biases, \"C\") +\r\n                        Concat(id, In(\"ADC\"" +
            ", id) + \",\" + In(\"BDC\", id) + \",\" + In(\"CDC\", id), group, prefix) :\r\n           " +
            "             PartialDepthwiseConvolution(id, inputs, 1, 3, 3, 3, strideX, stride" +
            "Y, 1, 1, biases, \"A\") + PartialDepthwiseConvolution(id, inputs, 2, 3, 5, 5, stri" +
            "deX, strideY, 2, 2, biases, \"B\") +\r\n                        PartialDepthwiseConv" +
            "olution(id, inputs, 3, 3, 7, 7, strideX, strideY, 3, 3, biases, \"C\") +\r\n        " +
            "                Concat(id, In(\"ADC\", id) + \",\" + In(\"BDC\", id) + \",\" + In(\"CDC\"," +
            " id), group, prefix);\r\n                */\r\n\r\n                default:\r\n         " +
            "           return useChannelSplit ? ChannelSplit(id, inputs, 4, 1, \"Q1\") + Chann" +
            "elSplit(id, inputs, 4, 2, \"Q2\") + ChannelSplit(id, inputs, 4, 3, \"Q3\") + Channel" +
            "Split(id, inputs, 4, 4, \"Q4\") +\r\n                        DepthwiseConvolution(id" +
            ", In(\"Q1CS\", id), 1, 3, 3, strideX, strideY, 1, 1, biases, \"A\") + DepthwiseConvo" +
            "lution(id, In(\"Q2CS\", id), 1, 5, 5, strideX, strideY, 2, 2, biases, \"B\") +\r\n    " +
            "                    DepthwiseConvolution(id, In(\"Q3CS\", id), 1, 7, 7, strideX, s" +
            "trideY, 3, 3, biases, \"C\") + DepthwiseConvolution(id, In(\"Q4CS\", id), 1, 9, 9, s" +
            "trideX, strideY, 4, 4, biases, \"D\") +\r\n                        Concat(id, In(\"AD" +
            "C\", id) + \",\" + In(\"BDC\", id) + \",\" + In(\"CDC\", id) + \",\" + In(\"DDC\", id), group" +
            ", prefix) :\r\n                        PartialDepthwiseConvolution(id, inputs, 1, " +
            "4, 3, 3, strideX, strideY, 1, 1, biases, \"A\") + PartialDepthwiseConvolution(id, " +
            "inputs, 2, 4, 5, 5, strideX, strideY, 2, 2, biases, \"B\") +\r\n                    " +
            "    PartialDepthwiseConvolution(id, inputs, 3, 4, 7, 7, strideX, strideY, 3, 3, " +
            "biases, \"C\") + PartialDepthwiseConvolution(id, inputs, 4, 4, 9, 9, strideX, stri" +
            "deY, 4, 4, biases, \"D\") +\r\n                        Concat(id, In(\"ADC\", id) + \"," +
            "\" + In(\"BDC\", id) + \",\" + In(\"CDC\", id) + \",\" + In(\"DDC\", id), group, prefix);\r\n" +
            "            }\r\n        }\r\n\r\n        public static string ChannelSplitRatioLeft(U" +
            "Int id, string inputs, Float ratio = 0.375f, string group = \"\", string prefix = " +
            "\"CSRL\")\r\n        {\r\n            return \"[\" + group + prefix + to_string(id) + \"]" +
            "\" + nwl +\r\n                \"Type=ChannelSplitRatioLeft\" + nwl +\r\n               " +
            " \"Inputs=\" + inputs + nwl +\r\n                \"Ratio=\" + to_string(ratio) + nwl +" +
            " nwl;\r\n        }\r\n\r\n        public static string ChannelSplitRatioRight(UInt id," +
            " string inputs, Float ratio = 0.375f, string group = \"\", string prefix = \"CSRR\")" +
            "\r\n        {\r\n            return \"[\" + group + prefix + to_string(id) + \"]\" + nwl" +
            " +\r\n                \"Type=ChannelSplitRatioRight\" + nwl +\r\n                \"Inpu" +
            "ts=\" + inputs + nwl +\r\n                \"Ratio=\" + to_string(ratio) + nwl + nwl;\r" +
            "\n        }\r\n\r\n        public static string ChannelSplit(UInt id, string inputs, " +
            "UInt groups, UInt part, string group = \"\", string prefix = \"CS\")\r\n        {\r\n   " +
            "         return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n            " +
            "    \"Type=ChannelSplit\" + nwl +\r\n                \"Inputs=\" + inputs + nwl +\r\n   " +
            "             \"Groups=\" + to_string(groups) + nwl +\r\n                \"Group=\" + t" +
            "o_string(part) + nwl + nwl;\r\n        }\r\n\r\n        public static string Shuffle(U" +
            "Int id, string inputs, UInt groups = 2, string group = \"\", string prefix = \"SH\")" +
            "\r\n        {\r\n            return \"[\" + group + prefix + to_string(id) + \"]\" + nwl" +
            " +\r\n                \"Type=Shuffle\" + nwl +\r\n                \"Inputs=\" + inputs +" +
            " nwl +\r\n                \"Groups=\" + to_string(groups) + nwl + nwl;\r\n        }\r\n\r" +
            "\n        public static string Concat(UInt id, string inputs, string group = \"\", " +
            "string prefix = \"CC\")\r\n        {\r\n            return \"[\" + group + prefix + to_s" +
            "tring(id) + \"]\" + nwl +\r\n                \"Type=Concat\" + nwl +\r\n                " +
            "\"Inputs=\" + inputs + nwl + nwl;\r\n        }\r\n\r\n        public static string AvgPo" +
            "oling(UInt id, string input, string kernel = \"3,3\", string stride = \"2,2\", strin" +
            "g pad = \"1,1\", string group = \"\", string prefix = \"P\")\r\n        {\r\n            r" +
            "eturn \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n                \"Type=" +
            "AvgPooling\" + nwl +\r\n                \"Inputs=\" + input + nwl +\r\n                " +
            "\"Kernel=\" + kernel + nwl +\r\n                \"Stride=\" + stride + nwl +\r\n        " +
            "        \"Pad=\" + pad + nwl + nwl;\r\n        }\r\n\r\n        public static string Glo" +
            "balAvgPooling(string input, string group = \"\", string prefix = \"GAP\")\r\n        {" +
            "\r\n            return \"[\" + group + prefix + \"]\" + nwl +\r\n                \"Type=G" +
            "lobalAvgPooling\" + nwl +\r\n                \"Inputs=\" + input + nwl + nwl;\r\n      " +
            "  }\r\n\r\n        public static string GlobalMaxPooling(string input, string group " +
            "= \"\", string prefix = \"GMP\")\r\n        {\r\n            return \"[\" + group + prefix" +
            " + \"]\" + nwl +\r\n                \"Type=GlobalMaxPooling\" + nwl +\r\n               " +
            " \"Inputs=\" + input + nwl + nwl;\r\n        }\r\n\r\n        public static string Dense" +
            "(UInt id, string inputs, UInt channels, bool biases = false, string group = \"\", " +
            "string prefix = \"DS\", string weightsFiller = \"\")\r\n        {\r\n            return " +
            "\"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n                \"Type=Dense\"" +
            " + nwl +\r\n                \"Inputs=\" + inputs + nwl +\r\n                \"Channels=" +
            "\" + to_string(channels) + nwl +\r\n                (biases ? \"Biases=Yes\" + nwl : " +
            "\"\") +\r\n                (weightsFiller != \"\" ? \"WeightsFiller=\" + weightsFiller +" +
            " nwl + nwl : nwl);\r\n        }\r\n\r\n        public static string Add(UInt id, strin" +
            "g inputs, string group = \"\", string prefix = \"A\")\r\n        {\r\n            return" +
            " \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n                \"Type=Add\" " +
            "+ nwl +\r\n                \"Inputs=\" + inputs + nwl + nwl;\r\n        }\r\n\r\n        p" +
            "ublic static string Multiply(string inputs, string group = \"\", string prefix = \"" +
            "CM\")\r\n        {\r\n            return \"[\" + group + prefix + \"]\" + nwl +\r\n        " +
            "        \"Type=Multiply\" + nwl +\r\n                \"Inputs=\" + inputs + nwl + nwl;" +
            "\r\n        }\r\n\r\n        public static string Dropout(UInt id, string inputs, stri" +
            "ng group = \"\", string prefix = \"D\")\r\n        {\r\n            return \"[\" + group +" +
            " prefix + to_string(id) + \"]\" + nwl +\r\n                \"Type=Dropout\" + nwl +\r\n " +
            "               \"Inputs=\" + inputs + nwl + nwl;\r\n        }\r\n\r\n        public stat" +
            "ic string Softmax(UInt id, string inputs, string group = \"\", string prefix = \"SM" +
            "\")\r\n        {\r\n            return \"[\" + group + prefix + to_string(id) + \"]\" + n" +
            "wl +\r\n                \"Type=Softmax\" + nwl +\r\n                \"Inputs=\" + inputs" +
            " + nwl + nwl;\r\n        }\r\n\r\n        public static string Softmax(string inputs, " +
            "string group = \"\", string prefix = \"SM\")\r\n        {\r\n            return \"[\" + gr" +
            "oup + prefix + \"]\" + nwl +\r\n                \"Type=Softmax\" + nwl +\r\n            " +
            "    \"Inputs=\" + inputs + nwl + nwl;\r\n        }\r\n\r\n        public static string L" +
            "ogSoftmax(UInt id, string inputs, string group = \"\", string prefix = \"LSM\")\r\n   " +
            "     {\r\n            return \"[\" + group + prefix + to_string(id) + \"]\" + nwl +\r\n " +
            "               \"Type=LogSoftmax\" + nwl +\r\n                \"Inputs=\" + inputs + n" +
            "wl + nwl;\r\n        }\r\n\r\n        public static string LogSoftmax(string inputs, s" +
            "tring group = \"\", string prefix = \"LSM\")\r\n        {\r\n            return \"[\" + gr" +
            "oup + prefix + \"]\" + nwl +\r\n                \"Type=LogSoftmax\" + nwl +\r\n         " +
            "       \"Inputs=\" + inputs + nwl + nwl;\r\n        }\r\n\r\n        public static strin" +
            "g Activation(UInt id, string inputs, string activation = \"Relu\", string group = " +
            "\"\", string prefix = \"ACT\")\r\n        {\r\n            return \"[\" + group + prefix +" +
            " to_string(id) + \"]\" + nwl +\r\n                \"Type=Activation\" + nwl +\r\n       " +
            "         \"Inputs=\" + inputs + nwl +\r\n                \"Activation=\" + activation " +
            "+ nwl + nwl;\r\n        }\r\n\r\n        public static string Activation(UInt id, stri" +
            "ng inputs, Activations activation = Activations.Relu, string group = \"\", string " +
            "prefix = \"ACT\")\r\n        {\r\n            return \"[\" + group + prefix + to_string(" +
            "id) + \"]\" + nwl +\r\n                \"Type=Activation\" + nwl +\r\n                \"I" +
            "nputs=\" + inputs + nwl +\r\n                \"Activation=\" + activation.ToString() " +
            "+ nwl + nwl;\r\n        }\r\n\r\n        public static string Cost(string inputs, Data" +
            "sets dataset, UInt channels, string cost = \"CategoricalCrossEntropy\", Float eps " +
            "= 0.0f, string group = \"\", string prefix = \"Cost\")\r\n        {\r\n            retur" +
            "n \"[\" + group + prefix + \"]\" + nwl +\r\n                \"Type=Cost\" + nwl +\r\n     " +
            "           \"Inputs=\" + inputs + nwl +\r\n                \"Cost=\" + cost + nwl +\r\n " +
            "               \"LabelIndex=\" + ((dataset == Datasets.cifar100 && channels == 100" +
            ") ? \"1\" : \"0\") + nwl +\r\n                \"Channels=\" + to_string(channels) + nwl " +
            "+\r\n                \"Eps=\" + to_string(eps);\r\n        }\r\n\r\n        public static " +
            "List<string> FusedMBConv(UInt A, UInt C, string inputs, UInt inputChannels, UInt" +
            " outputChannels, UInt stride = 1, UInt expandRatio = 4, bool se = false, Activat" +
            "ions activation = Activations.HardSwish)\r\n        {\r\n            var blocks = ne" +
            "w List<string>();\r\n            var hiddenDim = DIV8(inputChannels * expandRatio)" +
            ";\r\n            var identity = stride == 1 && inputChannels == outputChannels;\r\n\r" +
            "\n            if (se)\r\n            {\r\n                var group = In(\"SE\", C);\r\n\r" +
            "\n                blocks.Add(\r\n                    Convolution(C, inputs, hiddenD" +
            "im, 3, 3, stride, stride, 1, 1) +\r\n                    (expandRatio > 1 ? BatchN" +
            "ormActivationDropout(C, In(\"C\", C), activation) : BatchNormActivation(C, In(\"C\"," +
            " C), activation)) +\r\n\r\n                    GlobalAvgPooling(In(\"B\", C), group) +" +
            "\r\n                    Convolution(1, group + \"GAP\", DIV8(hiddenDim / expandRatio" +
            "), 1, 1, 1, 1, 0, 0, false, group) +\r\n                    BatchNormActivation(1," +
            " group + \"C1\", (activation == Activations.FRelu ? Activations.HardSwish : activa" +
            "tion), group) +\r\n                    Convolution(2, group + \"B1\", hiddenDim, 1, " +
            "1, 1, 1, 0, 0, false, group) +\r\n                    BatchNormActivation(2, group" +
            " + \"C2\", Activations.HardSigmoid, group) +\r\n                    Multiply(In(\"B\"," +
            " C) + \",\" + group + \"B2\", group) +\r\n\r\n                    Convolution(C + 1, gro" +
            "up + \"CM\", DIV8(outputChannels), 1, 1, 1, 1, 0, 0) +\r\n                    BatchN" +
            "orm(C + 1, In(\"C\", C + 1)));\r\n            }\r\n            else\r\n            {\r\n  " +
            "              blocks.Add(\r\n                    Convolution(C, inputs, hiddenDim," +
            " 3, 3, stride, stride, 1, 1) +\r\n                    (expandRatio > 1 ? BatchNorm" +
            "ActivationDropout(C, In(\"C\", C), activation) : BatchNormActivation(C, In(\"C\", C)" +
            ", activation)) +\r\n                    Convolution(C + 1, In(\"B\", C), DIV8(output" +
            "Channels), 1, 1, 1, 1, 0, 0) +\r\n                    BatchNorm(C + 1, In(\"C\", C +" +
            " 1)));\r\n            }\r\n\r\n            if (identity)\r\n            {\r\n             " +
            "   blocks.Add(\r\n                    Add(A, In(\"B\", C + 1) + \",\" + inputs));\r\n   " +
            "         }\r\n\r\n            return blocks;\r\n        }\r\n\r\n        public static Lis" +
            "t<string> MBConv(UInt A, UInt C, string inputs, UInt inputChannels, UInt outputC" +
            "hannels, UInt stride = 1, UInt expandRatio = 4, bool se = false, Activations act" +
            "ivation = Activations.HardSwish)\r\n        {\r\n            var blocks = new List<s" +
            "tring>();\r\n            var hiddenDim = DIV8(inputChannels * expandRatio);\r\n     " +
            "       var identity = stride == 1 && inputChannels == outputChannels;\r\n\r\n       " +
            "     if (se)\r\n            {\r\n                var group = In(\"SE\", C + 1);\r\n\r\n   " +
            "             blocks.Add(\r\n                    Convolution(C, inputs, hiddenDim, " +
            "1, 1, 1, 1, 0, 0) +\r\n                    BatchNormActivation(C, In(\"C\", C), acti" +
            "vation) +\r\n                    DepthwiseConvolution(C + 1, In(\"B\", C), 1, 3, 3, " +
            "stride, stride, 1, 1) +\r\n                    (expandRatio > 1 ? BatchNormActivat" +
            "ionDropout(C + 1, In(\"DC\", C + 1), activation) : BatchNormActivation(C + 1, In(\"" +
            "DC\", C + 1), activation)) +\r\n\r\n                    GlobalAvgPooling(In(\"B\", C + " +
            "1), group) +\r\n                    Convolution(1, group + \"GAP\", DIV8(hiddenDim /" +
            " expandRatio), 1, 1, 1, 1, 0, 0, false, group) +\r\n                    BatchNormA" +
            "ctivation(1, group + \"C1\", (activation == Activations.FRelu ? Activations.HardSw" +
            "ish : activation), group) +\r\n                    Convolution(2, group + \"B1\", hi" +
            "ddenDim, 1, 1, 1, 1, 0, 0, false, group) +\r\n                    BatchNormActivat" +
            "ion(2, group + \"C2\", Activations.HardSigmoid, group) +\r\n                    Mult" +
            "iply(In(\"B\", C + 1) + \",\" + group + \"B2\", group) +\r\n\r\n                    Convol" +
            "ution(C + 2, group + \"CM\", DIV8(outputChannels), 1, 1, 1, 1, 0, 0) +\r\n          " +
            "          BatchNorm(C + 2, In(\"C\", C + 2)));\r\n            }\r\n            else\r\n " +
            "           {\r\n                blocks.Add(\r\n                    Convolution(C, in" +
            "puts, hiddenDim, 1, 1, 1, 1, 0, 0) +\r\n                    BatchNormActivation(C," +
            " In(\"C\", C), activation) +\r\n                    DepthwiseConvolution(C + 1, In(\"" +
            "B\", C), 1, 3, 3, stride, stride, 1, 1) +\r\n                    (expandRatio > 1 ?" +
            " BatchNormActivationDropout(C + 1, In(\"DC\", C + 1), activation) : BatchNormActiv" +
            "ation(C + 1, In(\"DC\", C + 1), activation)) +\r\n                    Convolution(C " +
            "+ 2, In(\"B\", C + 1), DIV8(outputChannels), 1, 1, 1, 1, 0, 0) +\r\n                " +
            "    BatchNorm(C + 2, In(\"C\", C + 2)));\r\n            }\r\n\r\n            if (identit" +
            "y)\r\n            {\r\n                blocks.Add(\r\n                    Add(A, In(\"B" +
            "\", C + 2) + \",\" + inputs));\r\n            }\r\n\r\n            return blocks;\r\n      " +
            "  }\r\n\r\n\r\n        public static string InvertedResidual(UInt A, UInt C, UInt chan" +
            "nels, UInt kernel = 3, UInt pad = 1, bool subsample = false, UInt shuffle = 2, b" +
            "ool se = false, Activations activation = Activations.HardSwish)\r\n        {\r\n    " +
            "        if (subsample)\r\n            {\r\n                return\r\n                 " +
            "   Convolution(C, In(\"CC\", A), channels, 1, 1, 1, 1, 0, 0) +\r\n                  " +
            "  BatchNormActivation(C + 1, In(\"C\", C), activation) +\r\n                    Dept" +
            "hwiseConvolution(C + 1, In(\"B\", C + 1), 1, kernel, kernel, 1, 1, pad, pad) +\r\n  " +
            "                  Resampling(C + 1, In(\"DC\", C + 1)) +\r\n                    Batc" +
            "hNorm(C + 2, In(\"R\", C + 1)) +\r\n                    Convolution(C + 2, In(\"B\", C" +
            " + 2), channels, 1, 1, 1, 1, 0, 0) +\r\n                    BatchNormActivation(C " +
            "+ 3, In(\"C\", C + 2), activation) +\r\n                    DepthwiseConvolution(C +" +
            " 3, In(\"CC\", A), 1, kernel, kernel, 1, 1, pad, pad) +\r\n                    Resam" +
            "pling(C + 3, In(\"DC\", C + 3)) +\r\n                    BatchNorm(C + 4, In(\"R\", C " +
            "+ 3)) +\r\n                    Convolution(C + 4, In(\"B\", C + 4), channels, 1, 1, " +
            "1, 1, 0, 0) +\r\n                    BatchNormActivation(C + 5, In(\"C\", C + 4), ac" +
            "tivation) +\r\n                    Concat(A + 1, In(\"B\", C + 5) + \",\" + In(\"B\", C " +
            "+ 3));\r\n            }\r\n            else\r\n            {\r\n                var grou" +
            "pCH = In(\"CHATT\", C + 3); // Channel Attention\r\n                var groupSP = In" +
            "(\"SPATT\", C + 3); // Spatial Attention\r\n                var strSE = se ?\r\n      " +
            "              GlobalAvgPooling(In(\"B\", C + 3), groupCH) +\r\n                    C" +
            "onvolution(1, groupCH + \"GAP\", DIV8(channels), 1, 1, 1, 1, 0, 0, false, groupCH)" +
            " +\r\n                    BatchNormActivation(1, groupCH + In(\"C\", 1), activation," +
            " groupCH) +\r\n                    GlobalMaxPooling(In(\"B\", C + 3), groupCH) +\r\n  " +
            "                  Convolution(2, groupCH + \"GMP\", DIV8(channels), 1, 1, 1, 1, 0," +
            " 0, false, groupCH) +\r\n                    BatchNormActivation(2, groupCH + In(\"" +
            "C\", 2), activation, groupCH) +\r\n                    Add(1, In(groupCH + \"B\", 1) " +
            "+ \",\" + In(groupCH + \"B\", 2), groupCH) +\r\n                    Convolution(3, gro" +
            "upCH + \"A1\", DIV8(channels), 1, 1, 1, 1, 0, 0, false, groupCH) +\r\n              " +
            "      BatchNormActivation(3, groupCH + In(\"C\", 3), Activations.HardSigmoid, grou" +
            "pCH) +\r\n                    Multiply(In(\"B\", C + 3) + \",\" + In(groupCH + \"B\", 3)" +
            ", groupCH) +\r\n                    ReductionAvg(1, groupCH + \"CM\", groupSP) +\r\n  " +
            "                  ReductionMax(1, groupCH + \"CM\", groupSP) +\r\n                  " +
            "  Concat(1, In(groupSP + \"RAVG\", 1) + \",\" + In(groupSP + \"RMAX\", 1), groupSP) +\r" +
            "\n                    Convolution(1, groupSP + In(\"CC\", 1), 1, 7, 7, 1, 1, 3, 3, " +
            "false, groupSP) +\r\n                    BatchNormActivation(1, groupSP + In(\"C\", " +
            "1), Activations.HardSigmoid, groupSP) +\r\n                    Multiply(groupCH + " +
            "\"CM,\" + groupSP + In(\"B\", 1), groupSP) +\r\n                    Concat(A + 1, In(\"" +
            "LCS\", A) + \",\" + groupSP + \"CM\") :\r\n                    Concat(A + 1, In(\"LCS\", " +
            "A) + \",\" + In(\"B\", C + 3));\r\n\r\n                return\r\n                    Shuff" +
            "le(A, In(\"CC\", A), shuffle) +\r\n                    ChannelSplit(A, In(\"SH\", A), " +
            "2, 1, \"L\") + ChannelSplit(A, In(\"SH\", A), 2, 2, \"R\") +\r\n                    Conv" +
            "olution(C, In(\"RCS\", A), channels, 1, 1, 1, 1, 0, 0) +\r\n                    Batc" +
            "hNormActivation(C + 1, In(\"C\", C), activation) +\r\n                    DepthwiseC" +
            "onvolution(C + 1, In(\"B\", C + 1), 1, kernel, kernel, 1, 1, pad, pad) +\r\n        " +
            "            BatchNorm(C + 2, In(\"DC\", C + 1)) +\r\n                    Convolution" +
            "(C + 2, In(\"B\", C + 2), channels, 1, 1, 1, 1, 0, 0) +\r\n                    Batch" +
            "NormActivation(C + 3, In(\"C\", C + 2), activation) +\r\n                    strSE;\r" +
            "\n            }\r\n        }\r\n\r\n        public static string AugmentedInvertedResid" +
            "ual(UInt A, UInt C, UInt channels, UInt kernel = 3, UInt pad = 1, bool subsample" +
            " = false, UInt shuffle = 2, bool se = false, Activations activation = Activation" +
            "s.HardSwish)\r\n        {\r\n            if (subsample)\r\n            {\r\n            " +
            "    return\r\n                    Convolution(C, In(\"CC\", A), channels, 1, 1, 1, 1" +
            ", 0, 0) +\r\n                    BatchNormActivation(C + 1, In(\"C\", C), activation" +
            ") +\r\n                    DepthwiseConvolution(C + 1, In(\"B\", C + 1), 1, kernel, " +
            "kernel, 1, 1, pad, pad) +\r\n                    Resampling(C + 1, In(\"DC\", C + 1)" +
            ") +\r\n                    BatchNorm(C + 2, In(\"R\", C + 1)) +\r\n                   " +
            " Convolution(C + 2, In(\"B\", C + 2), channels, 1, 1, 1, 1, 0, 0) +\r\n             " +
            "       BatchNormActivation(C + 3, In(\"C\", C + 2), activation) +\r\n               " +
            "     DepthwiseConvolution(C + 3, In(\"CC\", A), 1, kernel, kernel, 1, 1, pad, pad)" +
            " +\r\n                    Resampling(C + 3, In(\"DC\", C + 3)) +\r\n                  " +
            "  BatchNorm(C + 4, In(\"R\", C + 3)) +\r\n                    Convolution(C + 4, In(" +
            "\"B\", C + 4), channels, 1, 1, 1, 1, 0, 0) +\r\n                    BatchNormActivat" +
            "ion(C + 5, In(\"C\", C + 4), activation) +\r\n                    Concat(A + 1, In(\"" +
            "B\", C + 5) + \",\" + In(\"B\", C + 3));\r\n            }\r\n            else\r\n          " +
            "  {\r\n                var groupCH = In(\"CHATT\", C + 3); // Channel Attention\r\n   " +
            "             var groupSP = In(\"SPATT\", C + 3); // Spatial Attention\r\n           " +
            "     var strSE = se ?\r\n                    GlobalAvgPooling(In(\"B\", C + 3), grou" +
            "pCH) +\r\n                    Convolution(1, groupCH + \"GAP\", DIV8(channels), 1, 1" +
            ", 1, 1, 0, 0, false, groupCH) +\r\n                    BatchNormActivation(1, grou" +
            "pCH + In(\"C\", 1), activation, groupCH) +\r\n                    GlobalMaxPooling(I" +
            "n(\"B\", C + 3), groupCH) +\r\n                    Convolution(2, groupCH + \"GMP\", D" +
            "IV8(channels), 1, 1, 1, 1, 0, 0, false, groupCH) +\r\n                    BatchNor" +
            "mActivation(2, groupCH + In(\"C\", 2), activation, groupCH) +\r\n                   " +
            " Add(1, In(groupCH + \"B\", 1) + \",\" + In(groupCH + \"B\", 2), groupCH) +\r\n         " +
            "           Convolution(3, groupCH + \"A1\", DIV8(channels), 1, 1, 1, 1, 0, 0, fals" +
            "e, groupCH) +\r\n                    BatchNormActivation(3, groupCH + In(\"C\", 3), " +
            "Activations.HardSigmoid, groupCH) +\r\n                    Multiply(In(\"B\", C + 3)" +
            " + \",\" + In(groupCH + \"B\", 3), groupCH) +\r\n                    ReductionAvg(1, g" +
            "roupCH + \"CM\", groupSP) +\r\n                    ReductionMax(1, groupCH + \"CM\", g" +
            "roupSP) +\r\n                    Concat(1, In(groupSP + \"RAVG\", 1) + \",\" + In(grou" +
            "pSP + \"RMAX\", 1), groupSP) +\r\n                    Convolution(1, groupSP + In(\"C" +
            "C\", 1), 1, 7, 7, 1, 1, 3, 3, false, groupSP) +\r\n                    BatchNormAct" +
            "ivation(1, groupSP + In(\"C\", 1), Activations.HardSigmoid, groupSP) +\r\n          " +
            "          Multiply(groupCH + \"CM,\" + groupSP + In(\"B\", 1), groupSP) +\r\n         " +
            "           Concat(A + 1, In(\"LCC\", A) + \",\" + groupSP + \"CM\") :\r\n               " +
            "     Concat(A + 1, In(\"LCC\", A) + \",\" + In(\"B\", C + 3));\r\n\r\n                retu" +
            "rn\r\n                    Shuffle(A, In(\"CC\", A), shuffle) +\r\n                    " +
            "ChannelSplitRatioLeft(A, In(\"SH\", A), 0.375f) + ChannelSplitRatioRight(A, In(\"SH" +
            "\", A), 0.375f) +\r\n                    Convolution(C, In(\"CSRR\", A), DIV8((UInt)(" +
            "(2 * channels) * 0.375f)), 1, 1, 1, 1, 0, 0) +\r\n                    // BatchNorm" +
            "(C + 1, In(\"C\", C)) +\r\n                    BatchNormActivation(C + 1, In(\"C\", C)" +
            ", activation) +\r\n                    DepthwiseConvolution(C + 1, In(\"B\", C + 1)," +
            " 1, kernel, kernel, 1, 1, pad, pad) +\r\n                    BatchNorm(C + 2, In(\"" +
            "DC\", C + 1)) +\r\n                    ChannelSplit(A, In(\"B\", C + 2), 2, 1, \"L1\") " +
            "+ ChannelSplit(A, In(\"B\", C + 2), 2, 2, \"R1\") +\r\n                    ChannelSpli" +
            "t(A, In(\"CSRL\", A), 2, 1, \"L2\") + ChannelSplit(A, In(\"CSRL\", A), 2, 2, \"R2\") +\r\n" +
            "                    Concat(A, In(\"L1CS\", A) + \",\" + In(\"L2CS\", A), \"L\") +\r\n     " +
            "               Concat(A, In(\"R1CS\", A) + \",\" + In(\"R2CS\", A), \"R\") +\r\n          " +
            "          Convolution(C + 2, In(\"RCC\", A), channels, 1, 1, 1, 1, 0, 0) +\r\n      " +
            "              BatchNormActivation(C + 3, In(\"C\", C + 2), activation) +\r\n        " +
            "            strSE;\r\n            }\r\n        }\r\n\r\n        internal static string G" +
            "enerate(ScriptParameters p)\r\n        {\r\n            var net =\r\n                \"" +
            "[\" + p.ModelName + \"]\" + nwl +\r\n                \"Dataset=\" + to_string(p.Dataset" +
            ") + nwl +\r\n                \"Dim=\" + to_string(p.C) + \",\" + to_string(p.H) + \",\" " +
            "+ to_string(p.W) + nwl +\r\n                ((p.PadH > 0 || p.PadW > 0) ? (!p.Mirr" +
            "orPad ? \"ZeroPad=\" + to_string(p.PadH) + \",\" + to_string(p.PadW) + nwl : \"Mirror" +
            "Pad=\" + to_string(p.PadH) + \",\" + to_string(p.PadW) + nwl) : \"\") +\r\n            " +
            "    ((p.PadH > 0 || p.PadW > 0) ? \"RandomCrop=Yes\" + nwl : \"\") +\r\n              " +
            "  \"WeightsFiller=\" + to_string(p.WeightsFiller) + (p.WeightsFillerModeVisible ? " +
            "\"(\" + p.WeightsFillerMode.ToString() + \",\" + to_string(p.WeightsGain) + \")\" : \"\"" +
            ") + (p.WeightsGainVisible && !p.WeightsFillerModeVisible ? \"(\" + to_string(p.Wei" +
            "ghtsGain) + \")\" : \"\") + (p.WeightsScaleVisible ? \"(\" + to_string(p.WeightsScale)" +
            " + \")\" : \"\") + nwl +\r\n                (p.WeightsLRM != 1 ? \"WeightsLRM=\" + to_st" +
            "ring(p.WeightsLRM) + nwl : \"\") +\r\n                (p.WeightsWDM != 1 ? \"WeightsW" +
            "DM=\" + to_string(p.WeightsWDM) + nwl : \"\") +\r\n                (p.HasBias ? \"Bias" +
            "esFiller=\" + to_string(p.BiasesFiller) + (p.BiasesFillerModeVisible ? \"(\" + p.Bi" +
            "asesFillerMode.ToString() + \",\" + to_string(p.BiasesGain) + \")\" : \"\") + (p.Biase" +
            "sGainVisible && !p.BiasesFillerModeVisible ? \"(\" + to_string(p.BiasesGain) + \")\"" +
            " : \"\") + (p.BiasesScaleVisible ? \"(\" + to_string(p.BiasesScale) + \")\" : \"\") + nw" +
            "l +\r\n                (p.BiasesLRM != 1 ? \"BiasesLRM=\" + to_string(p.BiasesLRM) +" +
            " nwl : \"\") +\r\n                (p.BiasesWDM != 1 ? \"BiasesWDM=\" + to_string(p.Bia" +
            "sesWDM) + nwl : \"\") : \"Biases=No\" + nwl) +\r\n                (p.DropoutVisible ? " +
            "\"Dropout=\" + to_string(p.Dropout) + nwl : \"\") +\r\n                (p.DepthDropVis" +
            "ible ? \"DepthDrop=\" + to_string(p.DepthDrop) + nwl : \"\") +\r\n                (p.D" +
            "epthDropVisible ? \"FixedDepthDrop=\" + to_string(p.FixedDepthDrop) + nwl : \"\") +\r" +
            "\n                \"Scaling=\" + to_string(p.BatchNormScaling) + nwl +\r\n           " +
            "     \"Momentum=\" + to_string(p.BatchNormMomentum) + nwl +\r\n                \"Eps=" +
            "\" + to_string(p.BatchNormEps) + nwl + nwl;\r\n\r\n            var blocks = new List<" +
            "string>();\r\n\r\n            switch (p.Script)\r\n            {\r\n                case" +
            " Scripts.augshufflenet:\r\n                    {\r\n                        var chan" +
            "nels = DIV8(p.Width * 16);\r\n\r\n                        net +=\r\n                  " +
            "          Convolution(1, \"Input\", channels, 3, 3, p.StrideHFirstConv, p.StrideWF" +
            "irstConv, 1, 1) +\r\n                            BatchNormActivation(1, \"C1\", p.Ac" +
            "tivation) +\r\n                            Convolution(2, \"B1\", channels, 1, 1, 1," +
            " 1, 0, 0) +\r\n                            BatchNormActivation(2, \"C2\", p.Activati" +
            "on) +\r\n                            DepthwiseConvolution(3, \"B2\", 1, 3, 3, 1, 1, " +
            "1, 1) +\r\n                            BatchNorm(3, \"DC3\") +\r\n                    " +
            "        Convolution(4, \"B3\", channels, 1, 1, 1, 1, 0, 0) +\r\n                    " +
            "        BatchNormActivation(4, \"C4\", p.Activation) +\r\n                          " +
            "  Convolution(5, \"B1\", channels, 1, 1, 1, 1, 0, 0) +\r\n                          " +
            "  Concat(1, \"C5,B4\");\r\n\r\n                        var C = 6ul;\r\n                 " +
            "       var A = 1ul;\r\n                        var subsample = false;\r\n           " +
            "             foreach (var rec in p.ShuffleNet)\r\n                        {\r\n     " +
            "                       if (subsample)\r\n                            {\r\n          " +
            "                      channels *= 2;\r\n                                net += Aug" +
            "mentedInvertedResidual(A++, C, channels, rec.Kernel, rec.Pad, true, rec.Shuffle," +
            " rec.SE, p.Activation);\r\n                                C += 5;\r\n              " +
            "              }\r\n                            for (var n = 0ul; n < rec.Iteration" +
            "s; n++)\r\n                            {\r\n                                net += A" +
            "ugmentedInvertedResidual(A++, C, channels, rec.Kernel, rec.Pad, false, rec.Shuff" +
            "le, rec.SE, p.Activation);\r\n                                C += 3;\r\n           " +
            "                 }\r\n                            subsample = true;\r\n             " +
            "           }\r\n\r\n                        net +=\r\n                            Conv" +
            "olution(C, In(\"CC\", A), p.Classes, 1, 1, 1, 1, 0, 0) +\r\n                        " +
            "    BatchNorm(C + 1, In(\"C\", C)) +\r\n                            GlobalAvgPooling" +
            "(In(\"B\", C + 1)) +\r\n                            LogSoftmax(\"GAP\") +\r\n           " +
            "                 Cost(\"LSM\", p.Dataset, p.Classes, \"CategoricalCrossEntropy\", 0." +
            "125f);\r\n                    }\r\n                    break;\r\n\r\n                cas" +
            "e Scripts.densenet:\r\n                    {\r\n                        var channels" +
            " = DIV8(p.GrowthRate);\r\n\r\n                        net += Convolution(1, \"Input\"," +
            " channels, 3, 3, p.StrideHFirstConv, p.StrideWFirstConv, 1, 1);\r\n\r\n             " +
            "           if (p.Bottleneck)\r\n                        {\r\n                       " +
            "     blocks.Add(\r\n                                BatchNormActivation(1, \"C1\", p" +
            ".Activation) +\r\n                                Convolution(2, \"B1\", DIV8(4 * p." +
            "GrowthRate), 1, 1, 1, 1, 0, 0) +\r\n                                BatchNormActiv" +
            "ation(2, \"C2\", p.Activation) +\r\n                                Convolution(3, \"" +
            "B2\", DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n                                (p" +
            ".Dropout > 0 ? Dropout(3, \"C3\") + Concat(1, \"C1,D3\") : Concat(1, \"C1,C3\")));\r\n  " +
            "                      }\r\n                        else\r\n                        {" +
            "\r\n                            blocks.Add(\r\n                                Batch" +
            "NormActivation(1, \"C1\", p.Activation) +\r\n                                Convolu" +
            "tion(2, \"B1\", DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n                         " +
            "       (p.Dropout > 0 ? Dropout(2, \"C2\") + Concat(1, \"C1,D2\") : Concat(1, \"C1,C2" +
            "\")));\r\n                        }\r\n\r\n                        var CC = 1ul;\r\n     " +
            "                   var C = p.Bottleneck ? 4ul : 3ul;\r\n\r\n                        " +
            "channels += DIV8(p.GrowthRate);\r\n\r\n                        for (var g = 1ul; g <" +
            "= p.Groups; g++)\r\n                        {\r\n                            for (va" +
            "r i = 1ul; i < p.Iterations; i++)\r\n                            {\r\n              " +
            "                  if (p.Bottleneck)\r\n                                {\r\n        " +
            "                            blocks.Add(\r\n                                       " +
            " BatchNormActivation(C, In(\"CC\", CC), p.Activation) +\r\n                         " +
            "               Convolution(C, In(\"B\", C), DIV8(4 * p.GrowthRate), 1, 1, 1, 1, 0," +
            " 0) +\r\n                                        BatchNormActivation(C + 1, In(\"C\"" +
            ", C), p.Activation) +\r\n                                        Convolution(C + 1" +
            ", In(\"B\", C + 1), DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n                     " +
            "                   (p.Dropout > 0 ? Dropout(C + 1, In(\"C\", C + 1)) + Concat(CC +" +
            " 1, In(\"CC\", CC) + \",\" + In(\"D\", C + 1)) : Concat(CC + 1, In(\"CC\", CC) + \",\" + I" +
            "n(\"C\", C + 1))));\r\n\r\n                                    C += 2;\r\n              " +
            "                  }\r\n                                else\r\n                     " +
            "           {\r\n                                    blocks.Add(\r\n                 " +
            "                       BatchNormActivation(C, In(\"CC\", CC), p.Activation) +\r\n   " +
            "                                     Convolution(C, In(\"B\", C), DIV8(p.GrowthRat" +
            "e), 3, 3, 1, 1, 1, 1) +\r\n                                        (p.Dropout > 0 " +
            "? Dropout(C, In(\"C\", C)) + Concat(CC + 1, In(\"CC\", CC) + \",\" + In(\"D\", C)) : Con" +
            "cat(CC + 1, In(\"CC\", CC) + \",\" + In(\"C\", C))));\r\n\r\n                             " +
            "       C++;\r\n                                }\r\n\r\n                              " +
            "  CC++;\r\n                                channels += DIV8(p.GrowthRate);\r\n      " +
            "                      }\r\n\r\n                            if (g < p.Groups)\r\n      " +
            "                      {\r\n                                channels = DIV8((UInt)S" +
            "ystem.Math.Floor(2.0 * channels * p.Compression));\r\n\r\n                          " +
            "      if (p.Dropout > 0)\r\n                                    blocks.Add(\r\n     " +
            "                                   Convolution(C, In(\"CC\", CC), channels, 1, 1, " +
            "1, 1, 0, 0) +\r\n                                        Dropout(C, In(\"C\", C)) +\r" +
            "\n                                        AvgPooling(g, In(\"D\", C), \"2,2\", \"2,2\"," +
            " \"0,0\"));\r\n                                else\r\n                               " +
            "     blocks.Add(\r\n                                        Convolution(C, \"CC\" + " +
            "to_string(CC), channels, 1, 1, 1, 1, 0, 0) +\r\n                                  " +
            "      AvgPooling(g, In(\"C\", C), \"2,2\", \"2,2\", \"0,0\"));\r\n                        " +
            "        C++;\r\n                                CC++;\r\n\r\n                         " +
            "       if (p.Bottleneck)\r\n                                {\r\n                   " +
            "                 blocks.Add(\r\n                                        BatchNormA" +
            "ctivation(C, In(\"P\", g), p.Activation) +\r\n                                      " +
            "  Convolution(C, In(\"B\", C), DIV8(4 * p.GrowthRate), 1, 1, 1, 1, 0, 0) +\r\n      " +
            "                                  BatchNormActivation(C + 1, In(\"C\", C), p.Activ" +
            "ation) +\r\n                                        Convolution(C + 1, In(\"B\", C +" +
            " 1), DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n                                  " +
            "      (p.Dropout > 0 ? Dropout(C + 1, In(\"C\", C + 1)) + Concat(CC, In(\"B\", C) + " +
            "\",\" + In(\"D\", C + 1)) : Concat(CC, In(\"B\", C) + \",\" + In(\"C\", C + 1))));\r\n\r\n    " +
            "                                C += 2;\r\n                                }\r\n    " +
            "                            else\r\n                                {\r\n           " +
            "                         blocks.Add(\r\n                                        Ba" +
            "tchNormActivation(C, In(\"P\", g), p.Activation) +\r\n                              " +
            "          Convolution(C, In(\"B\", C), DIV8(p.GrowthRate), 3, 3, 1, 1, 1, 1) +\r\n  " +
            "                                      (p.Dropout > 0 ? Dropout(C, In(\"C\", C)) + " +
            "Concat(CC, In(\"B\", C) + \",\" + In(\"D\", C)) : Concat(CC, In(\"B\", C) + \",\" + In(\"C\"" +
            ", C))));\r\n\r\n                                    C++;\r\n                          " +
            "      }\r\n\r\n                                channels += DIV8(p.GrowthRate);\r\n    " +
            "                        }\r\n                        }\r\n\r\n                        " +
            "foreach (var block in blocks)\r\n                            net += block;\r\n\r\n    " +
            "                    net +=\r\n                            Convolution(C, In(\"CC\", " +
            "CC), p.Classes, 1, 1, 1, 1, 0, 0) +\r\n                            BatchNorm(C + 1" +
            ", In(\"C\", C)) +\r\n                            GlobalAvgPooling(In(\"B\", C + 1)) +\r" +
            "\n                            LogSoftmax(\"GAP\") +\r\n                            Co" +
            "st(\"LSM\", p.Dataset, p.Classes, \"CategoricalCrossEntropy\", 0.125f);\r\n           " +
            "         }\r\n                    break;\r\n\r\n                case Scripts.efficient" +
            "netv2:\r\n                    {\r\n                        const Float width = 1.0f;" +
            "\r\n                        var inputChannels = DIV8((UInt)((Float)p.EfficientNet[" +
            "0].Channels * width));\r\n                        var A = 1ul;\r\n                  " +
            "      var C = 1ul;\r\n\r\n                        net +=\r\n                          " +
            "  Convolution(C, \"Input\", inputChannels, 3, 3, p.StrideHFirstConv, p.StrideWFirs" +
            "tConv, 1, 1) +\r\n                            BatchNormActivation(C, In(\"C\", C), p" +
            ".Activation);\r\n\r\n                        var stage = 0ul;\r\n                     " +
            "   var input = In(\"B\", C++);\r\n                        foreach (var rec in p.Effi" +
            "cientNet)\r\n                        {\r\n                            var beginStage" +
            " = stage < 3ul;\r\n                            var outputChannels = DIV8((UInt)((F" +
            "loat)rec.Channels * width));\r\n                            for (var n = 0ul; n < " +
            "rec.Iterations; n++)\r\n                            {\r\n                           " +
            "     var stride = n == 0ul ? rec.Stride : 1ul;\r\n                                " +
            "var identity = stride == 1ul && inputChannels == outputChannels;\r\n\r\n            " +
            "                    var subblocks = beginStage ?\r\n                              " +
            "      FusedMBConv(A, C, input, inputChannels, outputChannels, stride, rec.Expand" +
            "Ratio, rec.SE, p.Activation) :\r\n                                    MBConv(A, C," +
            " input, inputChannels, outputChannels, stride, rec.ExpandRatio, rec.SE, p.Activa" +
            "tion);\r\n\r\n                                foreach (var blk in subblocks)\r\n      " +
            "                              net += blk;\r\n\r\n                                inp" +
            "utChannels = outputChannels;\r\n                                C += beginStage ? " +
            "1ul : 2ul;\r\n\r\n                                if (identity)\r\n                   " +
            "             {\r\n                                    input = In(\"A\", A++);\r\n     " +
            "                               C++;\r\n                                }\r\n        " +
            "                        else\r\n                                    input = In(\"B\"" +
            ", C++);\r\n                            }\r\n                            stage++;\r\n  " +
            "                      }\r\n\r\n                        net +=\r\n                     " +
            "       Convolution(C, In(\"A\", A - 1), p.Classes, 1, 1, 1, 1, 0, 0) +\r\n          " +
            "                  BatchNormActivationDropout(C, In(\"C\", C), p.Activation) +\r\n   " +
            "                         GlobalAvgPooling(In(\"B\", C)) +\r\n                       " +
            "     LogSoftmax(\"GAP\") +\r\n                            Cost(\"LSM\", p.Dataset, p.C" +
            "lasses, \"CategoricalCrossEntropy\", 0.125f);\r\n                    }\r\n            " +
            "        break;\r\n\r\n                case Scripts.mobilenetv3:\r\n                   " +
            " {\r\n                        var se = p.SqueezeExcitation;\r\n                     " +
            "   var channelsplit = true;\r\n                        var W = p.Width * 16;\r\n\r\n  " +
            "                      net +=\r\n                            Convolution(1, \"Input\"" +
            ", DIV8(W), 3, 3, p.StrideHFirstConv, p.StrideWFirstConv, 1, 1) +\r\n              " +
            "              BatchNormActivation(1, \"C1\", p.Activation);\r\n\r\n                   " +
            "     blocks.Add(\r\n                            Convolution(2, \"B1\", DIV8(6 * W), " +
            "1, 1, 1, 1, 0, 0) +\r\n                            BatchNormActivation(2, \"C2\", p." +
            "Activation) +\r\n                            DepthwiseMixedConvolution(0, 3, \"B2\"," +
            " 1, 1, p.HasBias, channelsplit) +\r\n                            BatchNormActivati" +
            "on(3, \"DC3\", p.Activation) +\r\n                            Convolution(4, \"B3\", D" +
            "IV8(W), 1, 1, 1, 1, 0, 0) +\r\n                            BatchNorm(4, \"C4\"));\r\n\r" +
            "\n                        var A = 1ul;\r\n                        var C = 5ul;\r\n   " +
            "                     for (var g = 1ul; g <= p.Groups; g++)\r\n                    " +
            "    {\r\n                            var mix = g - 1ul;\r\n\r\n                       " +
            "     if (g > 1)\r\n                            {\r\n                                " +
            "W *= 2;\r\n\r\n                                var group = In(\"SE\", C + 1);\r\n       " +
            "                         var strSE =\r\n                                    se ? G" +
            "lobalAvgPooling(In(\"B\", C + 1), group) +\r\n                                    Co" +
            "nvolution(1, group + \"GAP\", DIV8((6 * W) / 4), 1, 1, 1, 1, 0, 0, false, group) +" +
            "\r\n                                    BatchNormActivation(1, group + \"C1\", (p.Ac" +
            "tivation == Activations.FRelu ? Activations.HardSwish : p.Activation), group) +\r" +
            "\n                                    Convolution(2, group + \"B1\", DIV8(6 * W), 1" +
            ", 1, 1, 1, 0, 0, false, group) +\r\n                                    BatchNormA" +
            "ctivation(2, group + \"C2\", Activations.HardSigmoid, group) +\r\n                  " +
            "                  Multiply(In(\"B\", C + 1) + \",\" + group + \"B2\", group) +\r\n      " +
            "                              Convolution(C + 2, group + \"CM\", DIV8(W), 1, 1, 1," +
            " 1, 0, 0) :\r\n                                    Convolution(C + 2, In(\"B\", C + " +
            "1), DIV8(W), 1, 1, 1, 1, 0, 0);\r\n\r\n                                blocks.Add(\r\n" +
            "                                    Convolution(C, In(\"A\", A), DIV8(6 * W), 1, 1" +
            ", 1, 1, 0, 0) +\r\n                                    BatchNormActivation(C, In(\"" +
            "C\", C), p.Activation) +\r\n                                    DepthwiseMixedConvo" +
            "lution(1ul, C + 1, In(\"B\", C), 2, 2, p.HasBias, channelsplit) +\r\n               " +
            "                     BatchNormActivation(C + 1, In(\"DC\", C + 1), p.Activation) +" +
            "\r\n                                    strSE +\r\n                                 " +
            "   BatchNorm(C + 2, In(\"C\", C + 2)));\r\n\r\n                                C += 3;" +
            "\r\n                            }\r\n\r\n                            for (var i = 1ul;" +
            " i < p.Iterations; i++)\r\n                            {\r\n                        " +
            "        var strOutputLayer = (i == 1 && g > 1) ? In(\"B\", C - 1) : (i == 1 && g =" +
            "= 1) ? In(\"B\", 4) : In(\"A\", A);\r\n\r\n                                var group = I" +
            "n(\"SE\", C + 1);\r\n\r\n                                var strSE =\r\n                " +
            "                    se ? GlobalAvgPooling(In(\"B\", C + 1), group) +\r\n            " +
            "                        Convolution(1, group + \"GAP\", DIV8((6 * W) / 4), 1, 1, 1" +
            ", 1, 0, 0, false, group) +\r\n                                    BatchNormActivat" +
            "ion(1, group + \"C1\", (p.Activation == Activations.FRelu ? Activations.HardSwish " +
            ": p.Activation), group) +\r\n                                    Convolution(2, gr" +
            "oup + \"B1\", DIV8(6 * W), 1, 1, 1, 1, 0, 0, false, group) +\r\n                    " +
            "                BatchNormActivation(2, group + \"C2\", Activations.HardSigmoid, gr" +
            "oup) +\r\n                                    Multiply(In(\"B\", C + 1) + \",\" + grou" +
            "p + \"B2\", group) +\r\n                                    Convolution(C + 2, group" +
            " + \"CM\", DIV8(W), 1, 1, 1, 1, 0, 0) :\r\n                                    Convo" +
            "lution(C + 2, In(\"B\", C + 1), DIV8(W), 1, 1, 1, 1, 0, 0);\r\n\r\n                   " +
            "             blocks.Add(\r\n                                    Convolution(C, str" +
            "OutputLayer, DIV8(6 * W), 1, 1, 1, 1, 0, 0) +\r\n                                 " +
            "   BatchNormActivation(C, In(\"C\", C), p.Activation) +\r\n                         " +
            "           DepthwiseMixedConvolution(1ul, C + 1, In(\"B\", C), 1, 1, p.HasBias, ch" +
            "annelsplit) +\r\n                                    BatchNormActivation(C + 1, In" +
            "(\"DC\", C + 1), p.Activation) +\r\n                                    strSE +\r\n   " +
            "                                 BatchNorm(C + 2, In(\"C\", C + 2)) +\r\n           " +
            "                         Add(A + 1, In(\"B\", C + 2) + \",\" + strOutputLayer));\r\n\r\n" +
            "                                A++;\r\n                                C += 3;\r\n " +
            "                           }\r\n                        }\r\n\r\n                     " +
            "   foreach (var block in blocks)\r\n                            net += block;\r\n\r\n " +
            "                       net +=\r\n                            BatchNormActivation(C" +
            ", In(\"A\", A), p.Activation) +\r\n                            Convolution(C + 1, In" +
            "(\"B\", C), p.Classes, 1, 1, 1, 1, 0, 0) +\r\n                            BatchNorm(" +
            "C + 1, In(\"C\", C + 1)) +\r\n                            GlobalAvgPooling(In(\"B\", C" +
            " + 1)) +\r\n                            LogSoftmax(\"GAP\") +\r\n                     " +
            "       Cost(\"LSM\", p.Dataset, p.Classes, \"CategoricalCrossEntropy\", 0.125f);\r\n  " +
            "                  }\r\n                    break;\r\n\r\n                case Scripts." +
            "resnet:\r\n                {\r\n                    var bn = p.Bottleneck ? 1ul : 0u" +
            "l;\r\n                    const Float K = 2.0f;\r\n                    var W = p.Wid" +
            "th * 16;\r\n                    var A = 1ul;\r\n                    var C = 5ul;\r\n\r\n" +
            "                    net += Convolution(1, \"Input\", DIV8(W), 3, 3, p.StrideHFirst" +
            "Conv, p.StrideWFirstConv, 1, 1);\r\n\r\n                    if (p.Bottleneck)\r\n     " +
            "               {\r\n                        blocks.Add(\r\n                         " +
            "   BatchNormActivation(1, \"C1\", p.Activation) +\r\n                            Con" +
            "volution(2, \"B1\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                            Batc" +
            "hNormActivation(2, \"C2\", p.Activation) +\r\n                            Convolutio" +
            "n(3, \"B2\", DIV8((UInt)(K * W / 4)), 3, 3, 1, 1, 1, 1) +\r\n                       " +
            "     (p.Dropout > 0 ? BatchNormActivationDropout(3, \"C3\", p.Activation) : BatchN" +
            "ormActivation(3, \"C3\", p.Activation)) +\r\n                            Convolution" +
            "(4, \"B3\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                            Convolution(" +
            "5, \"B1\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                            Add(1, \"C4,C5" +
            "\"));\r\n\r\n                        C = 6;\r\n                    }\r\n                 " +
            "   else\r\n                    {\r\n                        blocks.Add(\r\n           " +
            "                 BatchNormActivation(1, \"C1\", p.Activation) +\r\n                 " +
            "           Convolution(2, \"B1\", DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                  " +
            "          (p.Dropout > 0 ? BatchNormActivationDropout(2, \"C2\", p.Activation) : B" +
            "atchNormActivation(2, \"C2\", p.Activation)) +\r\n                            Convol" +
            "ution(3, \"B2\", DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                            Convolu" +
            "tion(4, \"B1\", DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                            Add(1, \"" +
            "C3,C4\"));\r\n                    }\r\n\r\n                    for (var g = 0ul; g < p." +
            "Groups; g++)\r\n                        {\r\n                        if (g > 0)\r\n   " +
            "                         {\r\n                            W *= 2;\r\n\r\n             " +
            "               var strChannelZeroPad = p.ChannelZeroPad ?\r\n                     " +
            "           AvgPooling(g, In(\"A\", A)) +\r\n                                \"[CZP\" +" +
            " to_string(g) + \"]\" + nwl + \"Type=ChannelZeroPad\" + nwl + \"Inputs=\" + In(\"P\", g)" +
            " + nwl + \"Channels=\" + to_string(W) + nwl + nwl +\r\n                             " +
            "   Add(A + 1, In(\"C\", C + 1 + bn) + \",\" + In(\"CZP\", g)) :\r\n                     " +
            "           AvgPooling(g, In(\"B\", C)) +\r\n                                Convolut" +
            "ion(C + 2 + bn, In(\"P\", g), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                      " +
            "          Add(A + 1, In(\"C\", C + 1 + bn) + \",\" + In(\"C\", C + 2 + bn));\r\n\r\n      " +
            "                      if (p.Bottleneck)\r\n                            {\r\n        " +
            "                        blocks.Add(\r\n                                    BatchNo" +
            "rmActivation(C, In(\"A\", A), p.Activation) +\r\n                                   " +
            " Convolution(C, In(\"B\", C), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                      " +
            "              BatchNormActivation(C + 1, In(\"C\", C), p.Activation) +\r\n          " +
            "                          Convolution(C + 1, In(\"B\", C + 1), DIV8(W), 3, 3, 2, 2" +
            ", 1, 1) +\r\n                                    (p.Dropout > 0 ? BatchNormActivat" +
            "ionDropout(C + 2, In(\"C\", C + 1), p.Activation) : BatchNormActivation(C + 2, In(" +
            "\"C\", C + 1), p.Activation)) +\r\n                                    Convolution(C" +
            " + 2, In(\"B\", C + 2), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                            " +
            "        strChannelZeroPad);\r\n                            }\r\n                    " +
            "        else\r\n                            {\r\n                                blo" +
            "cks.Add(\r\n                                    BatchNormActivation(C, In(\"A\", A)," +
            " p.Activation) +\r\n                                    Convolution(C, In(\"B\", C)," +
            " DIV8(W), 3, 3, 2, 2, 1, 1) +\r\n                                    (p.Dropout > " +
            "0 ? BatchNormActivationDropout(C + 1, In(\"C\", C), p.Activation) : BatchNormActiv" +
            "ation(C + 1, In(\"C\", C), p.Activation)) +\r\n                                    C" +
            "onvolution(C + 1, In(\"B\", C + 1), DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                " +
            "                    strChannelZeroPad);\r\n                            }\r\n\r\n      " +
            "                      A++;\r\n                            C += p.ChannelZeroPad ? " +
            "2 + bn : 3 + bn;\r\n                        }\r\n\r\n                        for (var " +
            "i = 1ul; i < p.Iterations; i++)\r\n                            {\r\n                " +
            "            if (p.Bottleneck)\r\n                            {\r\n                  " +
            "              blocks.Add(\r\n                                    BatchNormActivati" +
            "on(C, In(\"A\", A), p.Activation) +\r\n                                    Convoluti" +
            "on(C, In(\"B\", C), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                                " +
            "    BatchNormActivation(C + 1, In(\"C\", C), p.Activation) +\r\n                    " +
            "                Convolution(C + 1, In(\"B\", C + 1), DIV8((UInt)(K * W / 4)), 3, 3" +
            ", 1, 1, 1, 1) +\r\n                                    (p.Dropout > 0 ? BatchNormA" +
            "ctivationDropout(C + 2, In(\"C\", C + 1), p.Activation) : BatchNormActivation(C + " +
            "2, In(\"C\", C + 1), p.Activation)) +\r\n                                    Convolu" +
            "tion(C + 2, In(\"B\", C + 2), DIV8(W), 1, 1, 1, 1, 0, 0) +\r\n                      " +
            "              Add(A + 1, In(\"C\", C + 2) + \",\" + In(\"A\", A)));\r\n\r\n               " +
            "                 C += 3;\r\n                            }\r\n                       " +
            "     else\r\n                            {\r\n                                blocks" +
            ".Add(\r\n                                    BatchNormActivation(C, In(\"A\", A), p." +
            "Activation) +\r\n                                    Convolution(C, In(\"B\", C), DI" +
            "V8(W), 3, 3, 1, 1, 1, 1) +\r\n                                    (p.Dropout > 0 ?" +
            " BatchNormActivationDropout(C + 1, In(\"C\", C), p.Activation) : BatchNormActivati" +
            "on(C + 1, In(\"C\", C), p.Activation)) +\r\n                                    Conv" +
            "olution(C + 1, In(\"B\", C + 1), DIV8(W), 3, 3, 1, 1, 1, 1) +\r\n                   " +
            "                 Add(A + 1, In(\"C\", C + 1) + \",\" + In(\"A\", A)));\r\n\r\n            " +
            "                    C += 2;\r\n                            }\r\n                    " +
            "        A++;\r\n                        }\r\n                    }\r\n\r\n              " +
            "      foreach (var block in blocks)\r\n                        net += block;\r\n\r\n  " +
            "                  net +=\r\n                        BatchNormActivation(C, In(\"A\"," +
            " A), p.Activation) +\r\n                        Convolution(C + 1, In(\"B\", C), p.C" +
            "lasses, 1, 1, 1, 1, 0, 0) +\r\n                        BatchNorm(C + 1, In(\"C\", C " +
            "+ 1)) +\r\n                        GlobalAvgPooling(In(\"B\", C + 1)) +\r\n           " +
            "             LogSoftmax(\"GAP\") +\r\n                        Cost(\"LSM\", p.Dataset," +
            " p.Classes, \"CategoricalCrossEntropy\", 0.125f);\r\n                }\r\n            " +
            "    break;\r\n\r\n            case Scripts.shufflenetv2:\r\n                {\r\n       " +
            "             var channels = DIV8(p.Width * 16);\r\n\r\n                    net +=\r\n " +
            "                       Convolution(1, \"Input\", channels, 3, 3, p.StrideHFirstCon" +
            "v, p.StrideWFirstConv, 1, 1) +\r\n                        BatchNormActivation(1, \"" +
            "C1\", p.Activation) +\r\n                        Convolution(2, \"B1\", channels, 1, " +
            "1, 1, 1, 0, 0) +\r\n                        BatchNormActivation(2, \"C2\", p.Activat" +
            "ion) +\r\n                        DepthwiseConvolution(3, \"B2\", 1, 3, 3, 1, 1, 1, " +
            "1) +\r\n                        BatchNorm(3, \"DC3\") +\r\n                        Con" +
            "volution(4, \"B3\", channels, 1, 1, 1, 1, 0, 0) +\r\n                        BatchNo" +
            "rmActivation(4, \"C4\", p.Activation) +\r\n                        Convolution(5, \"B" +
            "1\", channels, 1, 1, 1, 1, 0, 0) +\r\n                        Concat(1, \"C5,B4\");\r\n" +
            "\r\n                    var C = 6ul;\r\n                    var A = 1ul;\r\n          " +
            "          var subsample = false;\r\n                    foreach (var rec in p.Shuf" +
            "fleNet)\r\n                    {\r\n                        if (subsample)\r\n        " +
            "                {\r\n                            channels *= 2;\r\n                 " +
            "           net += InvertedResidual(A++, C, channels, rec.Kernel, rec.Pad, true, " +
            "rec.Shuffle, rec.SE, p.Activation);\r\n                            C += 5;\r\n      " +
            "                  }\r\n                        for (var n = 0ul; n < rec.Iteration" +
            "s; n++)\r\n                            {\r\n                            net += Inver" +
            "tedResidual(A++, C, channels, rec.Kernel, rec.Pad, false, rec.Shuffle, rec.SE, p" +
            ".Activation);\r\n                            C += 3;\r\n                        }\r\n " +
            "                       subsample = true;\r\n                    }\r\n\r\n             " +
            "       net +=\r\n                        Convolution(C, In(\"CC\", A), p.Classes, 1," +
            " 1, 1, 1, 0, 0) +\r\n                        BatchNorm(C + 1, In(\"C\", C)) +\r\n     " +
            "                   GlobalAvgPooling(In(\"B\", C + 1)) +\r\n                        L" +
            "ogSoftmax(\"GAP\") +\r\n                        Cost(\"LSM\", p.Dataset, p.Classes, \"C" +
            "ategoricalCrossEntropy\", 0.125f);\r\n                }\r\n                break;\r\n  " +
            "          }\r\n\r\n            return net;\r\n        }\r\n\r\n\r\n        const string Fram" +
            "ework = \"net9.0\";\r\n#if DEBUG\r\n        const string Mode = \"Debug\";\r\n#else\r\n     " +
            "   const string Mode = \"Release\";\r\n#endif\r\n\r\n        public static string Storag" +
            "eDirectory { get; } = Path.Combine(Environment.GetFolderPath(RuntimeInformation." +
            "IsOSPlatform(OSPlatform.Windows) ? Environment.SpecialFolder.MyDocuments : Envir" +
            "onment.SpecialFolder.UserProfile), \"convnet\");\r\n        public static string Scr" +
            "iptsDirectory { get; } = Path.Combine(StorageDirectory, \"scripts\");\r\n        pub" +
            "lic static string ScriptPath { get; } = Path.Combine(ScriptsDirectory, \"bin\", Mo" +
            "de, Framework);\r\n\r\n        static void Main()\r\n        {\r\n            var script" +
            " = Generate(new ScriptParameters()\r\n\t\t    {\r\n        \t    Script = Scripts.augsh" +
            "ufflenet,\r\n                Activation = Activations.HardSwish,\r\n                " +
            "Dataset = Datasets.cifar10,\r\n                MeanStdNormalization = true,\r\n     " +
            "           H = 32,\r\n        \t    W = 32,\r\n        \t    PadH = 4,\r\n        \t    P" +
            "adW = 4,\r\n                MirrorPad = false,\r\n                StrideHFirstConv =" +
            " 1,\r\n                StrideWFirstConv = 1,\r\n                WeightsFiller = Fill" +
            "ers.HeNormal,\r\n        \t    WeightsFillerMode = FillerModes.In,\r\n        \t    We" +
            "ightsGain = 1f,\r\n        \t    WeightsScale = 0.05f,\r\n        \t    WeightsLRM = 1" +
            "f,\r\n        \t    WeightsWDM = 1f,\r\n        \t    HasBias = false,\r\n        \t    B" +
            "iasesFiller = Fillers.Constant,\r\n        \t    BiasesFillerMode = FillerModes.In," +
            "\r\n        \t    BiasesGain = 1f,\r\n        \t    BiasesScale = 0f,\r\n        \t    Bi" +
            "asesLRM = 1f,\r\n        \t    BiasesWDM = 1f,\r\n        \t    BatchNormMomentum = 0." +
            "995f,\r\n        \t    BatchNormEps = 0.0001f,\r\n        \t    BatchNormScaling = fal" +
            "se,\r\n        \t    Alpha = 0f,\r\n        \t    Beta = 0f,\r\n        \t    Groups = 3," +
            "\r\n        \t    Iterations = 4,\r\n        \t    Width = 16,\r\n        \t    GrowthRat" +
            "e = 12,\r\n        \t    Bottleneck = false,\r\n        \t    Dropout = 0f,\r\n        \t" +
            "    Compression = 0f,\r\n        \t    SqueezeExcitation = true,\r\n        \t    Chan" +
            "nelZeroPad = false,\r\n        \t    DepthDrop = 0.0f,\r\n        \t    FixedDepthDrop" +
            " = false,\r\n        \t    EfficientNet = [new(1, 24, 2, 1, false), new(4, 48, 4, 2" +
            ", false), new(4, 64, 4, 2, false), new(4, 128, 6, 2, true), new(6, 160, 9, 1, tr" +
            "ue), new(6, 256, 15, 2, true)],\r\n                ShuffleNet = [new(7, 3, 1, 2, f" +
            "alse) , new(7, 3, 1, 2, true), new(7, 3, 1, 2, true)] \r\n            });\r\n\r\n     " +
            "       var fileInfo = new FileInfo(Path.Combine(ScriptPath, @\"script.txt\"));\r\n  " +
            "          \r\n            if (fileInfo.Directory != null)\r\n            {\r\n        " +
            "        if (!fileInfo.Directory.Exists)\r\n                    fileInfo.Directory." +
            "Create();\r\n\r\n                var streamWriter = fileInfo.CreateText();\r\n        " +
            "        streamWriter.AutoFlush = true;\r\n                streamWriter.Write(scrip" +
            "t);\r\n                streamWriter.Close();\r\n                streamWriter.Dispose" +
            "();\r\n            }\r\n        }\r\n    }\r\n}")]
        public string Script {
            get {
                return ((string)(this["Script"]));
            }
            set {
                this["Script"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public double DefinitionOffset {
            get {
                return ((double)(this["DefinitionOffset"]));
            }
            set {
                this["DefinitionOffset"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public double ScriptOffset {
            get {
                return ((double)(this["ScriptOffset"]));
            }
            set {
                this["ScriptOffset"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public double LogOffset {
            get {
                return ((double)(this["LogOffset"]));
            }
            set {
                this["LogOffset"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int CaretOffsetScript {
            get {
                return ((int)(this["CaretOffsetScript"]));
            }
            set {
                this["CaretOffsetScript"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int CaretOffsetDefinition {
            get {
                return ((int)(this["CaretOffsetDefinition"]));
            }
            set {
                this["CaretOffsetDefinition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int SelectionStartScript {
            get {
                return ((int)(this["SelectionStartScript"]));
            }
            set {
                this["SelectionStartScript"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int SelectionLengthScript {
            get {
                return ((int)(this["SelectionLengthScript"]));
            }
            set {
                this["SelectionLengthScript"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int SelectionStartDefinition {
            get {
                return ((int)(this["SelectionStartDefinition"]));
            }
            set {
                this["SelectionStartDefinition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int SelectionLengthDefinition {
            get {
                return ((int)(this["SelectionLengthDefinition"]));
            }
            set {
                this["SelectionLengthDefinition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("-1")]
        public int SelectedIndex {
            get {
                return ((int)(this["SelectedIndex"]));
            }
            set {
                this["SelectedIndex"] = value;
            }
        }
    }
}
